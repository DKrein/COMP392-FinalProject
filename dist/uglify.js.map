{"version":3,"sources":["game.js","gameobject.js","keyboardcontrols.js","mousecontrols.js","screen.js","scene.js","level1.js","level2.js","level3.js","over.js","help.js","menu.js"],"names":["preload","assets","createjs","LoadQueue","installPlugin","Sound","on","init","this","loadManifest","manifest","setupCanvas","canvas","document","getElementById","setAttribute","config","Screen","WIDTH","toString","HEIGHT","style","backgroundColor","setupRenderer","setupCamera","currentScene","Scene","MENU","changeScene","addStatsObject","body","appendChild","renderer","domElement","gameLoop","window","addEventListener","onWindowResize","camera","aspect","innerWidth","innerHeight","updateProjectionMatrix","setSize","scene","resize","stats","Stats","setMode","position","left","top","update","requestAnimationFrame","render","Renderer","antialias","setClearColor","setPixelRatio","devicePixelRatio","CScreen","shadowMap","enabled","autoClear","console","log","PerspectiveCamera","RATIO","menu","scenes","Menu","LEVEL1","level1","Level1","LEVEL2","level2","Level2","LEVEL3","level3","Level3","OVER","over","Over","HELP","help","Help","__extends","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","objects","GameObject","_super","geometry","material","x","y","z","call","_geometry","_material","receiveShadow","castShadow","THREE","Mesh","KeyboardControls","onKeyDown","bind","onKeyUp","event","keyCode","moveForward","moveLeft","moveBackward","moveRight","jump","paused","MouseControls","sensitivity","yaw","pitch","OnMouseMove","movementX","movementY","start","Physijs","berryLocation","Array","berryNum","basketLocation","basketNum","_initialize","_setupCanvas","playBackgroundSound","bgSound","play","volume","blocker","instructions","display","coinCount","prevTime","stage","Stage","velocity","Vector3","clock","Clock","keyboardControls","mouseControls","setupScoreboard","scoreValue","livesValue","livesLabel","Text","addChild","levelLabel","scoreLabel","addLights","spotLight","SpotLight","set","intensity","lookAt","shadowCameraNear","shadowCameraFar","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowMapWidth","shadowMapHeight","shadowDarkness","name","add","ambientLight","AmbientLight","addGround","groundTexture","TextureLoader","load","wrapS","RepeatWrapping","wrapT","repeat","groundMaterial","PhongMaterial","map","groundGeometry","BoxGeometry","groundPhysicsMaterial","createMaterial","ground","ConvexMesh","addIslands","islandGeometry","islandPhysicsMaterial","island1","island2","island3","rotateY","island4","addWalls","wallTexture","wallMaterial","wallGeometry","wallPhysicsMaterial","wall1","wall2","wall3","wall4","wall5","wall6","addRocks","rockTexture","rockMaterial","rockGeometry","SphereGeometry","rockPhysicsMaterial","rock1","rock2","rock3","addLogs","logTexture","logMaterial","logGeometry","CylinderGeometry","logPhysicsMaterial","rotation","addPlates","plateTexture","plateMaterial","plateGeometry","CubeGeometry","platePhysicsMaterial","plate1","plate2","plate3","resetHazards","remove","addPlayer","playerGeometry","playerMaterial","LambertMaterial","color","player","BoxMesh","setAngularFactor","addDeathPlane","deathPlaneGeometry","deathPlaneMaterial","MeshLambertMaterial","transparent","opacity","deathPlane","addSkyBox","skyBoxTexture","skyBox","gameObject","side","DoubleSide","addBerry","berryTexture","berryMaterial","berryGeometry","berryPhysicsMaterial","berry","addBasket","basketTexture","basketMaterial","basketGeometry","basketPhysicsMaterial","basket","addCoinMesh","self","coins","JSONLoader","phongMaterial","emissive","Color","coinMaterial","count","setCoinPosition","coin","randomPointX","Math","floor","random","randomPointZ","pointerLockChange","pointerLockElement","element","removeEventListener","pointerLockError","checkControls","time","performance","now","delta","speed","direction","isGrounded","setDamping","setAngularVelocity","addVectors","applyQuaternion","quaternion","abs","getLinearVelocity","applyCentralForce","cameraLook","_unpauseSimulation","onSimulationResume","_this","havePointerLock","push","requestPointerLock","mozRequestPointerLock","webkitRequestPointerLock","fog","Fog","setGravity","eventObject","addDeath","collectablePicked","simulate","collectable","length","text","exitPointerLock","children","addLevelChange","zenith","degToRad","nadir","cameraPitch","clamp","width","ground23Geometry","ground2","ground3","ground4Geometry","ground4","plate4","plate5","groundTextureNormal","bumpMap","bumpScale","ImageUtils","loadTexture","_blocker","_stage","enableMouseOver","_bgImage","Bitmap","getResult","scaleX","scaleY","_gameOverLabel","regX","getMeasuredWidth","regY","getMeasuredLineHeight","_restartButton","getBounds","height","target","alpha","_gameHelpLabel","_startButton","_backButton","_logoImage","_gameLabel","_helpButton","_exitButton","alert","WebGLRenderer","PlaneGeometry","Geometry","AxisHelper","MeshBasicMaterial","LineBasicMaterial","MeshPhongMaterial","Material","Texture","Line","Object3D","PointLight","Face3","scripts","worker","ammo","myWorker","Worker","id","src","onload"],"mappings":"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","file":"uglify.js","sourcesContent":["/// <reference path=\"_reference.ts\"/>\n// MAIN GAME FILE\n// THREEJS Aliases\nvar Scene = Physijs.Scene;\nvar Renderer = THREE.WebGLRenderer;\nvar PerspectiveCamera = THREE.PerspectiveCamera;\nvar BoxGeometry = THREE.BoxGeometry;\nvar CubeGeometry = THREE.CubeGeometry;\nvar PlaneGeometry = THREE.PlaneGeometry;\nvar SphereGeometry = THREE.SphereGeometry;\nvar CylinderGeometry = THREE.CylinderGeometry;\nvar Geometry = THREE.Geometry;\nvar AxisHelper = THREE.AxisHelper;\nvar LambertMaterial = THREE.MeshLambertMaterial;\nvar MeshBasicMaterial = THREE.MeshBasicMaterial;\nvar LineBasicMaterial = THREE.LineBasicMaterial;\nvar PhongMaterial = THREE.MeshPhongMaterial;\nvar Material = THREE.Material;\nvar Texture = THREE.Texture;\nvar Line = THREE.Line;\nvar Mesh = THREE.Mesh;\nvar Object3D = THREE.Object3D;\nvar SpotLight = THREE.SpotLight;\nvar PointLight = THREE.PointLight;\nvar AmbientLight = THREE.AmbientLight;\nvar Color = THREE.Color;\nvar Vector3 = THREE.Vector3;\nvar Face3 = THREE.Face3;\nvar CScreen = config.Screen;\nvar Clock = THREE.Clock;\nvar ImageUtils = THREE.ImageUtils;\n//Custom Game Objects\nvar gameObject = objects.GameObject;\n// Setup a Web Worker for Physijs\nPhysijs.scripts.worker = \"/Scripts/lib/Physijs/physijs_worker.js\";\nPhysijs.scripts.ammo = \"/Scripts/lib/Physijs/examples/js/ammo.js\";\nvar myWorker = new Worker(Physijs.scripts.worker);\nconsole.log(myWorker);\n// Game Variables\nvar scene;\nvar currentScene;\nvar renderer;\nvar camera;\nvar level1;\nvar level2;\nvar level3;\nvar menu;\nvar over;\nvar help;\nvar stats;\nvar canvas;\nvar assets;\nvar manifest = [\n    { id: \"land\", src: \"../../Assets/audio/Land.wav\" },\n    { id: \"hit\", src: \"../../Assets/audio/hit.wav\" },\n    { id: \"coin\", src: \"../../Assets/audio/coin.mp3\" },\n    { id: \"jump\", src: \"../../Assets/audio/Jump.wav\" },\n    { id: \"Collision\", src: \"../../Assets/sounds/collision.mp3\" },\n    { id: \"Collect\", src: \"../../Assets/sounds/collecting.mp3\" },\n    { id: \"Falling\", src: \"../../Assets/sounds/falling.mp3\" },\n    { id: \"Background\", src: \"../../Assets/sounds/background.mp3\" },\n    { id: \"StartButton\", src: \"../../Assets/images/StartButton.png\" },\n    { id: \"RestartButton\", src: \"../../Assets/images/RestartButton.png\" },\n    { id: \"HelpButton\", src: \"../../Assets/images/HelpButton.png\" },\n    { id: \"BackButton\", src: \"../../Assets/images/BackButton.png\" },\n    { id: \"ExitButton\", src: \"../../Assets/images/ExitButton.png\" },\n    { id: \"GrassTexture\", src: \"../../Assets/images/grass.png\" },\n    { id: \"BranchTexture\", src: \"../../Assets/images/fallingbranch.png\" },\n    { id: \"WallTexture\", src: \"../../Assets/images/wall.png\" },\n    { id: \"SkyBG\", src: \"../../Assets/images/skyBG.jpg\" },\n    { id: \"MenuBackground\", src: \"../../Assets/images/menuBg.jpg\" },\n    { id: \"CompanyLogo\", src: \"../../Assets/images/comapanyLogo.png\" },\n];\nfunction preload() {\n    assets = new createjs.LoadQueue();\n    assets.installPlugin(createjs.Sound);\n    assets.on(\"complete\", init, this);\n    assets.loadManifest(manifest);\n}\nfunction setupCanvas() {\n    canvas = document.getElementById(\"canvas\");\n    canvas.setAttribute(\"width\", config.Screen.WIDTH.toString());\n    canvas.setAttribute(\"height\", (config.Screen.HEIGHT * 0.1).toString());\n    canvas.style.backgroundColor = \"#000000\";\n}\nfunction init() {\n    // setup the canvas for the game\n    setupCanvas();\n    // setup the default renderer\n    setupRenderer();\n    // setup the camera\n    setupCamera();\n    // set initial scene\n    currentScene = config.Scene.MENU;\n    changeScene();\n    // Add framerate stats\n    addStatsObject();\n    document.body.appendChild(renderer.domElement);\n    gameLoop(); // render the scene\t\n    // setup the resize event listener\n    window.addEventListener('resize', onWindowResize, false);\n}\n// Window Resize Event Handler\nfunction onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    scene.resize();\n}\n// Add Frame Rate Stats to the Scene\nfunction addStatsObject() {\n    stats = new Stats();\n    stats.setMode(0);\n    stats.domElement.style.position = 'absolute';\n    stats.domElement.style.left = '0px';\n    stats.domElement.style.top = '0px';\n    document.body.appendChild(stats.domElement);\n}\n// Setup main game loop\nfunction gameLoop() {\n    stats.update();\n    scene.update();\n    // render using requestAnimationFrame\n    requestAnimationFrame(gameLoop);\n    // render the scene\n    renderer.render(scene, camera);\n}\n// Setup default renderer\nfunction setupRenderer() {\n    renderer = new Renderer({ antialias: true });\n    renderer.setClearColor(0x404040, 1.0);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(CScreen.WIDTH, CScreen.HEIGHT);\n    renderer.shadowMap.enabled = true;\n    renderer.autoClear = true;\n    console.log(\"Finished setting up Renderer...\");\n}\n// Setup main camera for the scene\nfunction setupCamera() {\n    camera = new PerspectiveCamera(35, config.Screen.RATIO, 0.1, 100);\n    //camera.position.set(0, 10, 30);\n    //camera.lookAt(new Vector3(0, 0, 0));\n    console.log(\"Finished setting up Camera...\");\n}\nfunction changeScene() {\n    // Launch various scenes\n    switch (currentScene) {\n        case config.Scene.MENU:\n            // show the MENU scene\n            menu = new scenes.Menu();\n            scene = menu;\n            console.log(\"Starting MENU Scene\");\n            break;\n        case config.Scene.LEVEL1:\n            // show the LEVEL1 scene\n            level1 = new scenes.Level1();\n            scene = level1;\n            console.log(\"Starting LEVEL1 Scene\");\n            break;\n        case config.Scene.LEVEL2:\n            // show the LEVEL2 scene\n            level2 = new scenes.Level2();\n            scene = level2;\n            console.log(\"Starting LEVEL2 Scene\");\n            break;\n        case config.Scene.LEVEL3:\n            // show the LEVEL3 scene\n            level3 = new scenes.Level3();\n            scene = level3;\n            console.log(\"Starting LEVEL3 Scene\");\n            break;\n        case config.Scene.OVER:\n            // show the game OVER scene\n            over = new scenes.Over();\n            scene = over;\n            console.log(\"Starting OVER Scene\");\n            break;\n        case config.Scene.HELP:\n            // show the game HELP scene\n            help = new scenes.Help();\n            scene = help;\n            console.log(\"Starting HELP Scene\");\n            break;\n    }\n}\nwindow.onload = preload;\n\n//# sourceMappingURL=game.js.map\n","/// <reference path=\"../../typings/tsd.d.ts\"/>\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar objects;\n(function (objects) {\n    var GameObject = (function (_super) {\n        __extends(GameObject, _super);\n        //CONSTRUCTOR ++++++++++++++++++++++++++++++++++++++++++++++++++++\n        function GameObject(geometry, material, x, y, z) {\n            _super.call(this, geometry, material);\n            this._geometry = geometry;\n            this._material = material;\n            this.position.x = x;\n            this.position.y = y;\n            this.position.z = z;\n            this.receiveShadow = true;\n            this.castShadow = true;\n        }\n        return GameObject;\n    }(THREE.Mesh));\n    objects.GameObject = GameObject;\n})(objects || (objects = {}));\n\n//# sourceMappingURL=gameobject.js.map\n","var objects;\n(function (objects) {\n    // KeyboardControls Class +++++++++++++++\n    var KeyboardControls = (function () {\n        // CONSTRUCTOR ++++++++++++++++++++++++++    \n        function KeyboardControls() {\n            this.enabled = false;\n            document.addEventListener('keydown', this.onKeyDown.bind(this), false);\n            document.addEventListener('keyup', this.onKeyUp.bind(this), false);\n        }\n        // PUBLIC METHODS\n        KeyboardControls.prototype.onKeyDown = function (event) {\n            switch (event.keyCode) {\n                case 38: /*up arrow*/\n                case 87:\n                    this.moveForward = true;\n                    break;\n                case 37: /*left arrow*/\n                case 65:\n                    this.moveLeft = true;\n                    break;\n                case 40: /*down arrow*/\n                case 83:\n                    this.moveBackward = true;\n                    break;\n                case 39: /*right arrow*/\n                case 68:\n                    this.moveRight = true;\n                    break;\n                case 32:\n                    this.jump = true;\n                    break;\n                case 81:\n                    this.paused = (this.paused) ? false : true;\n                    break;\n            }\n        };\n        KeyboardControls.prototype.onKeyUp = function (event) {\n            switch (event.keyCode) {\n                case 38: /*up arrow*/\n                case 87:\n                    this.moveForward = false;\n                    break;\n                case 37: /*left arrow*/\n                case 65:\n                    this.moveLeft = false;\n                    break;\n                case 40: /*down arrow*/\n                case 83:\n                    this.moveBackward = false;\n                    break;\n                case 39: /*right arrow*/\n                case 68:\n                    this.moveRight = false;\n                    break;\n                case 32:\n                    this.jump = false;\n                    break;\n            }\n        };\n        return KeyboardControls;\n    }());\n    objects.KeyboardControls = KeyboardControls;\n})(objects || (objects = {}));\n\n//# sourceMappingURL=keyboardcontrols.js.map\n","var objects;\n(function (objects) {\n    // MouseControls Class +++++++++++++++\n    var MouseControls = (function () {\n        // CONSTRUCTOR +++++++++++++++++++++++\n        function MouseControls() {\n            this.enabled = false;\n            this.sensitivity = 0.1;\n            this.yaw = 0;\n            this.pitch = 0;\n            document.addEventListener('mousemove', this.OnMouseMove.bind(this), false);\n        }\n        // PUBLIC METHODS +++++++++++++++++++++\n        MouseControls.prototype.OnMouseMove = function (event) {\n            this.yaw = -event.movementX * this.sensitivity * 1.2;\n            this.pitch = -event.movementY * this.sensitivity * 0.1;\n        };\n        return MouseControls;\n    }());\n    objects.MouseControls = MouseControls;\n})(objects || (objects = {}));\n\n//# sourceMappingURL=mousecontrols.js.map\n","var config;\n(function (config) {\n    var Screen = (function () {\n        function Screen() {\n        }\n        Screen.WIDTH = window.innerWidth;\n        Screen.HEIGHT = window.innerHeight;\n        Screen.RATIO = window.innerWidth / window.innerHeight;\n        return Screen;\n    }());\n    config.Screen = Screen;\n    // Scene Constants\n    var Scene = (function () {\n        function Scene() {\n        }\n        Scene.MENU = 0;\n        Scene.HELP = 1;\n        Scene.OVER = 2;\n        Scene.LEVEL1 = 3;\n        Scene.LEVEL2 = 4;\n        Scene.LEVEL3 = 5;\n        return Scene;\n    }());\n    config.Scene = Scene;\n})(config || (config = {}));\n\n//# sourceMappingURL=screen.js.map\n","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar scenes;\n(function (scenes) {\n    /**\n     * The Scene class is a generic / custom Scene container\n     *\n     * @class Scene\n     */\n    var Scene = (function (_super) {\n        __extends(Scene, _super);\n        /**\n         * @constructor\n         */\n        function Scene() {\n            _super.call(this);\n        }\n        /**\n         * The start method is the main method for the scene class\n         *\n         * @method start\n         * @return void\n         */\n        Scene.prototype.start = function () {\n        };\n        /**\n         * The update method updates the animation loop and other objects\n         *\n         * @method update\n         * @return void\n         */\n        Scene.prototype.update = function () {\n        };\n        /**\n         * The resize method is a procedure that sets variables and objects on screen resize\n         *\n         * @method resize\n         * @return void\n         */\n        Scene.prototype.resize = function () {\n        };\n        return Scene;\n    }(Physijs.Scene));\n    scenes.Scene = Scene;\n})(scenes || (scenes = {}));\n\n//# sourceMappingURL=scene.js.map\n","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * The Scenes module is a namespace to reference all scene objects\n *\n * @module scenes\n */\nvar scenes;\n(function (scenes) {\n    /**\n     * The Level1 class is where the main action occurs for the game\n     *\n     * @class Level1\n     * @param havePointerLock {boolean}\n     */\n    var Level1 = (function (_super) {\n        __extends(Level1, _super);\n        /**\n         * @constructor\n         */\n        function Level1() {\n            _super.call(this);\n            this.berryLocation = new Array();\n            this.berryNum = 0;\n            this.basketLocation = new Array();\n            this.basketNum = 0;\n            this._initialize();\n            this.start();\n        }\n        // PRIVATE METHODS ++++++++++++++++++++++++++++++++++++++++++\n        /**\n         * Sets up the initial canvas for the play scene\n         *\n         * @method setupCanvas\n         * @return void\n         */\n        Level1.prototype._setupCanvas = function () {\n            canvas.setAttribute(\"width\", config.Screen.WIDTH.toString());\n            canvas.setAttribute(\"height\", (config.Screen.HEIGHT * 0.1).toString());\n            canvas.style.backgroundColor = \"#000000\";\n        };\n        /**\n        * Sets up the background scene for the play scene\n        *\n        * @method playBackgroundSound\n        * @return void\n        */\n        Level1.prototype.playBackgroundSound = function () {\n            this.bgSound = createjs.Sound.play(\"Background\", { volume: 0.02 });\n            this.bgSound.on(\"complete\", this.playBackgroundSound, this);\n        };\n        /**\n         * The initialize method sets up key objects to be used in the scene\n         *\n         * @method _initialize\n         * @returns void\n         */\n        Level1.prototype._initialize = function () {\n            // Create to HTMLElements\n            this.blocker = document.getElementById(\"blocker\");\n            this.instructions = document.getElementById(\"instructions\");\n            this.blocker.style.display = \"block\";\n            // setup canvas for menu scene\n            this._setupCanvas();\n            this.coinCount = 10;\n            this.prevTime = 0;\n            this.stage = new createjs.Stage(canvas);\n            this.velocity = new Vector3(0, 0, 0);\n            // setup a THREE.JS Clock object\n            this.clock = new Clock();\n            // Instantiate Game Controls\n            this.keyboardControls = new objects.KeyboardControls();\n            this.mouseControls = new objects.MouseControls();\n        };\n        /**\n         * This method sets up the scoreboard for the scene\n         *\n         * @method setupScoreboard\n         * @returns void\n         */\n        Level1.prototype.setupScoreboard = function () {\n            // initialize  score and lives values\n            this.scoreValue = 0;\n            this.livesValue = 1;\n            // Add Lives Label\n            this.livesLabel = new createjs.Text(\"LIVES: \" + this.livesValue, \"40px Consolas\", \"#ffffff\");\n            this.livesLabel.x = config.Screen.WIDTH * 0.1;\n            this.livesLabel.y = (config.Screen.HEIGHT * 0.15) * 0.20;\n            this.stage.addChild(this.livesLabel);\n            console.log(\"Added Lives Label to stage\");\n            // Add Level Label\n            this.levelLabel = new createjs.Text(\"LEVEL 1\", \"40px Consolas\", \"#ffffff\");\n            this.levelLabel.x = config.Screen.WIDTH * 0.45;\n            this.levelLabel.y = (config.Screen.HEIGHT * 0.15) * 0.20;\n            this.stage.addChild(this.levelLabel);\n            console.log(\"Added Lives Label to stage\");\n            // Add Score Label\n            this.scoreLabel = new createjs.Text(\"SCORE: \" + this.scoreValue, \"40px Consolas\", \"#ffffff\");\n            this.scoreLabel.x = config.Screen.WIDTH * 0.8;\n            this.scoreLabel.y = (config.Screen.HEIGHT * 0.15) * 0.20;\n            this.stage.addChild(this.scoreLabel);\n            console.log(\"Added Score Label to stage\");\n        };\n        /**\n         * Add lights to the scene\n         *\n         * @method addLights\n         * @return void\n         */\n        Level1.prototype.addLights = function () {\n            // Spot Light\n            this.spotLight = new SpotLight(0xffffff);\n            this.spotLight.position.set(20, 50, -15);\n            this.spotLight.castShadow = true;\n            this.spotLight.intensity = 2;\n            this.spotLight.lookAt(new Vector3(0, 0, 0));\n            this.spotLight.shadowCameraNear = 2;\n            this.spotLight.shadowCameraFar = 200;\n            this.spotLight.shadowCameraLeft = -5;\n            this.spotLight.shadowCameraRight = 5;\n            this.spotLight.shadowCameraTop = 5;\n            this.spotLight.shadowCameraBottom = -5;\n            this.spotLight.shadowMapWidth = 2048;\n            this.spotLight.shadowMapHeight = 2048;\n            this.spotLight.shadowDarkness = 0.5;\n            this.spotLight.name = \"Spot Light\";\n            this.add(this.spotLight);\n            //AmbientLight\n            this.ambientLight = new AmbientLight(0x404040);\n            this.add(this.ambientLight);\n            console.log(\"Added Lights to scene\");\n        };\n        /**\n         * Add a ground plane to the scene\n         *\n         * @method addGround\n         * @return void\n         */\n        Level1.prototype.addGround = function () {\n            this.groundTexture = new THREE.TextureLoader().load('../../Assets/images/grass.png');\n            this.groundTexture.wrapS = THREE.RepeatWrapping;\n            this.groundTexture.wrapT = THREE.RepeatWrapping;\n            this.groundTexture.repeat.set(8, 8);\n            this.groundMaterial = new PhongMaterial();\n            this.groundMaterial.map = this.groundTexture;\n            this.groundGeometry = new BoxGeometry(20, 1, 20);\n            this.groundPhysicsMaterial = Physijs.createMaterial(this.groundMaterial, 0, 0);\n            this.ground = new Physijs.ConvexMesh(this.groundGeometry, this.groundPhysicsMaterial, 0);\n            this.ground.receiveShadow = true;\n            this.ground.name = \"Ground\";\n            this.add(this.ground);\n            console.log(\"Added Burnt Ground to scene\");\n        };\n        /**\n         * Add the islands to the scene\n         *\n         * @method addIslands\n         * @return void\n         */\n        Level1.prototype.addIslands = function () {\n            this.islandGeometry = new BoxGeometry(6, 1, 25);\n            this.islandPhysicsMaterial = Physijs.createMaterial(this.groundMaterial, 0, 0);\n            this.island1 = new Physijs.ConvexMesh(this.islandGeometry, this.islandPhysicsMaterial, 0);\n            this.island1.position.set(-17, 0, 0);\n            this.island1.receiveShadow = true;\n            this.island1.name = \"Ground\";\n            this.add(this.island1);\n            this.island2 = new Physijs.ConvexMesh(this.islandGeometry, this.islandPhysicsMaterial, 0);\n            this.island2.position.set(17, 0, 0);\n            this.island2.receiveShadow = true;\n            this.island2.name = \"Ground\";\n            this.add(this.island2);\n            this.island3 = new Physijs.ConvexMesh(this.islandGeometry, this.islandPhysicsMaterial, 0);\n            this.island3.position.set(0, 0, -17);\n            this.island3.receiveShadow = true;\n            this.island3.rotateY(1.5708);\n            this.island3.name = \"Ground\";\n            this.add(this.island3);\n            this.island4 = new Physijs.ConvexMesh(this.islandGeometry, this.islandPhysicsMaterial, 0);\n            this.island4.position.set(0, 0, 17);\n            this.island4.receiveShadow = true;\n            this.island4.rotateY(1.5708);\n            this.island4.name = \"Ground\";\n            this.add(this.island4);\n        };\n        /**\n         * Add walls to the scene\n         *\n         * @method addWalls\n         * @return void\n         */\n        Level1.prototype.addWalls = function () {\n            this.wallTexture = new THREE.TextureLoader().load('../../Assets/images/wall.png');\n            this.wallTexture.wrapS = THREE.RepeatWrapping;\n            this.wallTexture.wrapT = THREE.RepeatWrapping;\n            this.wallTexture.repeat.set(8, 8);\n            this.wallMaterial = new PhongMaterial();\n            this.wallMaterial.map = this.wallTexture;\n            this.wallGeometry = new BoxGeometry(20, 4, .5);\n            this.wallPhysicsMaterial = Physijs.createMaterial(this.wallMaterial, 0, 0);\n            this.wall1 = new Physijs.ConvexMesh(this.wallGeometry, this.wallPhysicsMaterial, 0);\n            this.wall1.position.set(14.2, 2.5, -4.1);\n            this.wall1.rotateY(1.5708);\n            this.wall1.receiveShadow = true;\n            this.wall1.name = \"Wall\";\n            this.add(this.wall1);\n            this.wall2 = new Physijs.ConvexMesh(this.wallGeometry, this.wallPhysicsMaterial, 0);\n            this.wall2.position.set(6, 2.5, 6.4);\n            this.wall2.rotateY(1.5708);\n            this.wall2.receiveShadow = true;\n            this.wall2.name = \"Wall\";\n            this.add(this.wall2);\n            this.wall3 = new Physijs.ConvexMesh(this.wallGeometry, this.wallPhysicsMaterial, 0);\n            this.wall3.position.set(-10, 2.5, -6.1);\n            this.wall3.rotateY(1.5708);\n            this.wall3.receiveShadow = true;\n            this.wall3.name = \"Wall\";\n            this.add(this.wall3);\n            this.wall4 = new Physijs.ConvexMesh(this.wallGeometry, this.wallPhysicsMaterial, 0);\n            this.wall4.position.set(-7.7, 2.5, 9.7);\n            this.wall4.receiveShadow = true;\n            this.wall4.name = \"Wall\";\n            this.add(this.wall4);\n            this.wall5 = new Physijs.ConvexMesh(this.wallGeometry, this.wallPhysicsMaterial, 0);\n            this.wall5.position.set(-7.6, 2.5, -3.85);\n            this.wall5.receiveShadow = true;\n            this.wall5.name = \"Wall\";\n            this.add(this.wall5);\n            this.wallGeometry = new BoxGeometry(10, 4, .5);\n            this.wall6 = new Physijs.ConvexMesh(this.wallGeometry, this.wallPhysicsMaterial, 0);\n            this.wall6.position.set(-1.9, 2.5, -13);\n            this.wall6.rotateY(1.5708);\n            this.wall6.receiveShadow = true;\n            this.wall6.name = \"Wall\";\n            this.add(this.wall6);\n        };\n        /**\n        * Add rocks to the scene - actually it just prepare the rock, who really add it to the scene is the pressure plate\n        *\n        * @method addRocks\n        * @return void\n        */\n        Level1.prototype.addRocks = function () {\n            this.rockTexture = new THREE.TextureLoader().load('../../Assets/images/rock.png');\n            this.rockTexture.wrapS = THREE.RepeatWrapping;\n            this.rockTexture.wrapT = THREE.RepeatWrapping;\n            this.rockMaterial = new PhongMaterial();\n            this.rockMaterial.map = this.rockTexture;\n            this.rockGeometry = new SphereGeometry(1, 5, 5);\n            this.rockPhysicsMaterial = Physijs.createMaterial(this.rockMaterial, 0, 0);\n            this.rock1 = new Physijs.ConvexMesh(this.rockGeometry, this.rockPhysicsMaterial, 1);\n            this.rock1.position.set(-4, 10, -5.5);\n            this.rock1.receiveShadow = true;\n            this.rock1.name = \"Rock\";\n            this.rock2 = new Physijs.ConvexMesh(this.rockGeometry, this.rockPhysicsMaterial, 1);\n            this.rock2.position.set(-17, 10, -8);\n            this.rock2.receiveShadow = true;\n            this.rock2.name = \"Rock\";\n            this.rock3 = new Physijs.ConvexMesh(this.rockGeometry, this.rockPhysicsMaterial, 1);\n            this.rock3.position.set(-18, 10, 2);\n            this.rock3.receiveShadow = true;\n            this.rock3.name = \"Rock\";\n        };\n        /**\n         * Add Logs to the scene - actually it just prepare the rock, who really add it to the scene is the pressure plate\n         *\n         * @method addLogs\n         * @return void\n         */\n        Level1.prototype.addLogs = function () {\n            this.logTexture = new THREE.TextureLoader().load('../../Assets/images/fallingbranch.png');\n            this.logTexture.wrapS = THREE.RepeatWrapping;\n            this.logTexture.wrapT = THREE.RepeatWrapping;\n            this.logMaterial = new PhongMaterial();\n            this.logMaterial.map = this.logTexture;\n            this.logGeometry = new CylinderGeometry(1, 1, 10);\n            this.logPhysicsMaterial = Physijs.createMaterial(this.logMaterial, 0, 0);\n            this.log = new Physijs.ConvexMesh(this.logGeometry, this.logPhysicsMaterial, 1);\n            this.log.position.set(4, 15, 10);\n            this.log.rotation.x = 1.5708;\n            this.log.receiveShadow = true;\n            this.log.name = \"Log\";\n        };\n        /**\n         * Add Pressure Plates to the scene\n         *\n         * @method addPlates\n         * @return void\n         */\n        Level1.prototype.addPlates = function () {\n            this.plateTexture = new THREE.TextureLoader().load('../../Assets/images/PressurePlate.jpg');\n            this.plateTexture.wrapS = THREE.RepeatWrapping;\n            this.plateTexture.wrapT = THREE.RepeatWrapping;\n            this.plateMaterial = new PhongMaterial();\n            this.plateMaterial.map = this.plateTexture;\n            this.plateGeometry = new CubeGeometry(1, 0.001, 1);\n            this.platePhysicsMaterial = Physijs.createMaterial(this.plateMaterial, 0, 0);\n            this.plate1 = new Physijs.ConvexMesh(this.plateGeometry, this.platePhysicsMaterial, 0);\n            this.plate1.position.set(1, .5, -5.5);\n            this.plate1.receiveShadow = true;\n            this.plate1.name = \"Plate1\";\n            this.add(this.plate1);\n            this.plate2 = new Physijs.ConvexMesh(this.plateGeometry, this.platePhysicsMaterial, 0);\n            this.plate2.position.set(-18.7, .5, -3);\n            this.plate2.receiveShadow = true;\n            this.plate2.name = \"Plate2\";\n            this.add(this.plate2);\n            this.plate3 = new Physijs.ConvexMesh(this.plateGeometry, this.platePhysicsMaterial, 0);\n            this.plate3.position.set(4, .5, 9);\n            this.plate3.receiveShadow = true;\n            this.plate3.name = \"Plate3\";\n            this.add(this.plate3);\n        };\n        /**\n         * Reset all hazards function\n         *\n         * @method resetHazards\n         * @return void\n         */\n        Level1.prototype.resetHazards = function () {\n            this.remove(this.rock1);\n            this.remove(this.rock2);\n            this.remove(this.rock3);\n            this.remove(this.log);\n            this.rock1.position.set(-4, 10, -5.5);\n            this.rock2.position.set(-17, 10, -8);\n            this.rock3.position.set(-18, 10, 2);\n            this.log.position.set(4, 15, 10);\n        };\n        /**\n         * Adds the player controller to the scene\n         *\n         * @method addPlayer\n         * @return void\n         */\n        Level1.prototype.addPlayer = function () {\n            // Player Object\n            this.playerGeometry = new BoxGeometry(2, 4, 2);\n            this.playerMaterial = Physijs.createMaterial(new LambertMaterial({ color: 0x00ff00 }), 0.4, 0);\n            this.player = new Physijs.BoxMesh(this.playerGeometry, this.playerMaterial, 1);\n            this.player.position.set(0, 20, 0);\n            this.player.receiveShadow = true;\n            this.player.castShadow = true;\n            this.player.name = \"Player\";\n            this.add(this.player);\n            console.log(\"Added Player to Scene\");\n            this.player.setAngularFactor(new THREE.Vector3(0, 0, 0));\n        };\n        /**\n         * Add the death plane to the scene\n         *\n         * @method addDeathPlane\n         * @return void\n         */\n        Level1.prototype.addDeathPlane = function () {\n            this.deathPlaneGeometry = new BoxGeometry(100, 1, 100);\n            this.deathPlaneMaterial = new THREE.MeshLambertMaterial({ color: 0xE5E5FF, transparent: true, opacity: 0.1 });\n            this.deathPlane = new Physijs.BoxMesh(this.deathPlaneGeometry, this.deathPlaneMaterial, 0);\n            this.deathPlane.position.set(0, -20, 0);\n            this.deathPlane.name = \"DeathPlane\";\n            this.add(this.deathPlane);\n            console.log(\"Added DeathPlane to scene\");\n        };\n        /**\n         * Add the Skybox to the scene\n         *\n         * @method addSkyBox\n         * @return void\n         */\n        Level1.prototype.addSkyBox = function () {\n            this.skyBoxTexture = new THREE.TextureLoader().load('../../Assets/images/skyBG.png');\n            this.skyBox = new gameObject(new SphereGeometry(60, 60, 60), new LambertMaterial({ map: this.skyBoxTexture }), 2, 2, 2);\n            this.skyBox.material.side = THREE.DoubleSide;\n            this.skyBox.name = \"Skybox\";\n            this.add(this.skyBox);\n            console.log(\"Added skyBox to scene\");\n        };\n        /**\n         * Add Berry to the scene\n         *\n         * @method addBerry\n         * @return void\n         */\n        Level1.prototype.addBerry = function () {\n            this.berryTexture = new THREE.TextureLoader().load('../../Assets/images/berry.png');\n            this.berryTexture.wrapS = THREE.RepeatWrapping;\n            this.berryTexture.wrapT = THREE.RepeatWrapping;\n            this.berryMaterial = new PhongMaterial();\n            this.berryMaterial.map = this.berryTexture;\n            this.berryGeometry = new BoxGeometry(.5, .5, .5);\n            this.berryPhysicsMaterial = Physijs.createMaterial(this.berryMaterial, 0, 0);\n            this.berry = new Physijs.ConvexMesh(this.berryGeometry, this.berryPhysicsMaterial, 0);\n            this.berry.position.set(-8.5, 1.5, -5.5);\n            this.berry.receiveShadow = true;\n            this.berry.name = \"Berry\";\n            this.add(this.berry);\n            console.log(\"Added Berry to scene\");\n        };\n        /**\n         * Add Basket to the scene\n         *\n         * @method addBasket\n         * @return void\n         */\n        Level1.prototype.addBasket = function () {\n            this.basketTexture = new THREE.TextureLoader().load('../../Assets/images/bask.png');\n            this.basketTexture.wrapS = THREE.RepeatWrapping;\n            this.basketTexture.wrapT = THREE.RepeatWrapping;\n            this.basketMaterial = new PhongMaterial();\n            this.basketMaterial.map = this.basketTexture;\n            this.basketGeometry = new BoxGeometry(.5, .5, .5);\n            this.basketPhysicsMaterial = Physijs.createMaterial(this.basketMaterial, 0, 0);\n            this.basket = new Physijs.ConvexMesh(this.basketGeometry, this.basketPhysicsMaterial, 0);\n            this.basket.position.set(-16, 3, 14);\n            this.basket.receiveShadow = true;\n            this.basket.name = \"Basket\";\n            this.add(this.basket);\n            console.log(\"Added basket to scene\");\n        };\n        /**\n         * This method adds a coin to the scene\n         *\n         * @method addCoinMesh\n         * @return void\n         */\n        Level1.prototype.addCoinMesh = function () {\n            var self = this;\n            this.coins = new Array(); // Instantiate a convex mesh array\n            var coinLoader = new THREE.JSONLoader().load(\"../../Assets/imported/coin.json\", function (geometry) {\n                var phongMaterial = new PhongMaterial({ color: 0xE7AB32 });\n                phongMaterial.emissive = new THREE.Color(0xE7AB32);\n                var coinMaterial = Physijs.createMaterial((phongMaterial), 0.4, 0.6);\n                for (var count = 0; count < self.coinCount; count++) {\n                    self.coins[count] = new Physijs.ConvexMesh(geometry, coinMaterial);\n                    self.coins[count].receiveShadow = true;\n                    self.coins[count].castShadow = true;\n                    self.coins[count].name = \"Coin\";\n                    self.setCoinPosition(self.coins[count]);\n                    console.log(\"Added Coin Mesh to Scene, at position: \" + self.coins[count].position);\n                }\n            });\n        };\n        /**\n         * This method randomly sets the coin object's position\n         *\n         * @method setCoinPosition\n         * @return void\n         */\n        Level1.prototype.setCoinPosition = function (coin) {\n            var randomPointX = Math.floor(Math.random() * 20) - 10;\n            var randomPointZ = Math.floor(Math.random() * 20) - 10;\n            coin.position.set(randomPointX, 10, randomPointZ);\n            console.log(randomPointX);\n            console.log(randomPointZ);\n            this.add(coin);\n        };\n        /**\n         * Event Handler method for any pointerLockChange events\n         *\n         * @method pointerLockChange\n         * @return void\n         */\n        Level1.prototype.pointerLockChange = function (event) {\n            if (document.pointerLockElement === this.element) {\n                // enable our mouse and keyboard controls\n                this.keyboardControls.enabled = true;\n                this.mouseControls.enabled = true;\n                this.blocker.style.display = 'none';\n            }\n            else {\n                if (this.livesValue <= 0) {\n                    this.blocker.style.display = 'none';\n                    document.removeEventListener('pointerlockchange', this.pointerLockChange.bind(this), false);\n                    document.removeEventListener('mozpointerlockchange', this.pointerLockChange.bind(this), false);\n                    document.removeEventListener('webkitpointerlockchange', this.pointerLockChange.bind(this), false);\n                    document.removeEventListener('pointerlockerror', this.pointerLockError.bind(this), false);\n                    document.removeEventListener('mozpointerlockerror', this.pointerLockError.bind(this), false);\n                    document.removeEventListener('webkitpointerlockerror', this.pointerLockError.bind(this), false);\n                }\n                else {\n                    this.blocker.style.display = '-webkit-box';\n                    this.blocker.style.display = '-moz-box';\n                    this.blocker.style.display = 'box';\n                    this.instructions.style.display = '';\n                }\n                // disable our mouse and keyboard controls\n                this.keyboardControls.enabled = false;\n                this.mouseControls.enabled = false;\n                console.log(\"PointerLock disabled\");\n            }\n        };\n        /**\n         * Event handler for PointerLockError\n         *\n         * @method pointerLockError\n         * @return void\n         */\n        Level1.prototype.pointerLockError = function (event) {\n            this.instructions.style.display = '';\n            console.log(\"PointerLock Error Detected!!\");\n        };\n        // Check Controls Function\n        /**\n         * This method updates the player's position based on user input\n         *\n         * @method checkControls\n         * @return void\n         */\n        Level1.prototype.checkControls = function () {\n            if (this.keyboardControls.enabled) {\n                this.velocity = new Vector3();\n                var time = performance.now();\n                var delta = (time - this.prevTime) / 1000;\n                var speed = 600.0;\n                //if (this.isGrounded) {\n                var direction = new Vector3(0, 0, 0);\n                if (this.keyboardControls.moveForward) {\n                    this.velocity.z -= speed * delta;\n                }\n                if (this.keyboardControls.moveLeft) {\n                    this.velocity.x -= speed * delta;\n                }\n                if (this.keyboardControls.moveBackward) {\n                    this.velocity.z += speed * delta;\n                }\n                if (this.keyboardControls.moveRight) {\n                    this.velocity.x += speed * delta;\n                }\n                if (this.keyboardControls.jump && this.isGrounded) {\n                    if (this.player.position.y >= 1 && this.player.position.y <= 3) {\n                        this.velocity.y += 10 * speed * delta;\n                    }\n                    else if (this.player.position.y > 3) {\n                        this.isGrounded = false;\n                        createjs.Sound.play(\"jump\");\n                    }\n                }\n                this.player.setDamping(0.7, 0.1);\n                // Changing player's rotation\n                this.player.setAngularVelocity(new Vector3(0, this.mouseControls.yaw, 0));\n                direction.addVectors(direction, this.velocity);\n                direction.applyQuaternion(this.player.quaternion);\n                if (Math.abs(this.player.getLinearVelocity().x) < 20 && Math.abs(this.player.getLinearVelocity().y) < 10) {\n                    this.player.applyCentralForce(direction);\n                }\n                this.cameraLook();\n                //} // isGrounded ends\n                //reset Pitch and Yaw\n                this.mouseControls.pitch = 0;\n                this.mouseControls.yaw = 0;\n                this.prevTime = time;\n            } // Controls Enabled ends\n            else {\n                this.player.setAngularVelocity(new Vector3(0, 0, 0));\n            }\n        };\n        Level1.prototype._unpauseSimulation = function () {\n            scene.onSimulationResume();\n            console.log(\"resume simulation\");\n        };\n        // PUBLIC METHODS +++++++++++++++++++++++++++++++++++++++++++\n        /**\n         * The start method is the main method for the scene class\n         *\n         * @method start\n         * @return void\n         */\n        Level1.prototype.start = function () {\n            var _this = this;\n            // Set Up Scoreboard\n            this.setupScoreboard();\n            // Set Up background sound\n            this.playBackgroundSound();\n            //check to see if pointerlock is supported\n            this.havePointerLock = 'pointerLockElement' in document ||\n                'mozPointerLockElement' in document ||\n                'webkitPointerLockElement' in document;\n            //define berry positions        \n            this.berryLocation.push(new THREE.Vector3(-8.5, 1.5, -5.5));\n            this.berryLocation.push(new THREE.Vector3(-2, 1.5, 16));\n            this.berryLocation.push(new THREE.Vector3(17, 1.5, 0));\n            this.berryLocation.push(new THREE.Vector3(-15, 1.5, -2));\n            //define basket positions\n            this.basketLocation.push(new THREE.Vector3(-16, 3, 14));\n            this.basketLocation.push(new THREE.Vector3(15, 3, 16));\n            this.basketLocation.push(new THREE.Vector3(-15, 3, -16));\n            this.basketLocation.push(new THREE.Vector3(17, 3, -15));\n            // Check to see if we have pointerLock\n            if (this.havePointerLock) {\n                this.element = document.body;\n                this.instructions.addEventListener('click', function () {\n                    // Ask the user for pointer lock\n                    console.log(\"Requesting PointerLock\");\n                    _this.element.requestPointerLock = _this.element.requestPointerLock ||\n                        _this.element.mozRequestPointerLock ||\n                        _this.element.webkitRequestPointerLock;\n                    _this.element.requestPointerLock();\n                });\n                document.addEventListener('pointerlockchange', this.pointerLockChange.bind(this), false);\n                document.addEventListener('mozpointerlockchange', this.pointerLockChange.bind(this), false);\n                document.addEventListener('webkitpointerlockchange', this.pointerLockChange.bind(this), false);\n                document.addEventListener('pointerlockerror', this.pointerLockError.bind(this), false);\n                document.addEventListener('mozpointerlockerror', this.pointerLockError.bind(this), false);\n                document.addEventListener('webkitpointerlockerror', this.pointerLockError.bind(this), false);\n            }\n            // Scene changes for Physijs\n            this.name = \"Main\";\n            this.fog = new THREE.Fog(0xffffff, 0, 750);\n            this.setGravity(new THREE.Vector3(0, -10, 0));\n            // start simulation\n            /*\n            this.addEventListener('update', this._simulateScene);\n            console.log(\"Start Simulation\"); */\n            // Add Spot Light to the scene\n            this.addLights();\n            // Ground Object\n            this.addGround();\n            //Add all the island arround the main ground\n            this.addIslands();\n            //Add Walls in the scenario\n            this.addWalls();\n            //Add Rocks in the scenario\n            this.addRocks();\n            //Add Logs in the scenario\n            this.addLogs();\n            //Add the pressure plates in the scenario\n            this.addPlates();\n            //Reset the first time\n            this.resetHazards();\n            // Add player controller\n            this.addPlayer();\n            // Add custom coin imported from Blender\n            //this.addCoinMesh();\n            // Add death plane to the scene\n            this.addDeathPlane();\n            // Add Skybox to the scene\n            this.addSkyBox();\n            this.addBasket();\n            this.addBerry();\n            // Collision Check\n            this.player.addEventListener('collision', function (eventObject) {\n                if (eventObject.name === \"Ground\" || eventObject.name === \"Wall\") {\n                    this.isGrounded = true;\n                    createjs.Sound.play(\"land\");\n                }\n                if (eventObject.name === \"DeathPlane\") {\n                    createjs.Sound.play(\"Falling\");\n                    this.addDeath();\n                }\n                if (eventObject.name === \"Berry\") {\n                    createjs.Sound.play(\"Collect\");\n                    this.collectablePicked(eventObject);\n                    console.log(\"player ate a berry\");\n                }\n                if (eventObject.name === \"Basket\") {\n                    createjs.Sound.play(\"Collect\");\n                    this.collectablePicked(eventObject);\n                    console.log(\"player ate a basket\");\n                }\n                if (eventObject.name === \"Plate1\") {\n                    this.add(this.rock1);\n                }\n                if (eventObject.name === \"Plate2\") {\n                    this.add(this.rock2);\n                    this.add(this.rock3);\n                }\n                if (eventObject.name === \"Plate3\") {\n                    this.add(this.log);\n                }\n                if (eventObject.name === \"Rock\" || eventObject.name === \"Log\" && eventObject.position.y > 2) {\n                    createjs.Sound.play(\"Collision\");\n                    this.addDeath();\n                }\n                /*\n                if (eventObject.name === \"Coin\") {\n                    createjs.Sound.play(\"coin\");\n                    this.remove(eventObject);\n                    this.setCoinPosition(eventObject);\n                    this.scoreValue += 100;\n                    this.scoreLabel.text = \"SCORE: \" + this.scoreValue;\n                }*/\n            }.bind(this));\n            //Rock eventHandler            \n            this.rock1.addEventListener('collision', function (eventObject) {\n                if (eventObject.name === \"Ground\" || eventObject.name === \"Wall\") {\n                    this.resetHazards();\n                }\n            }.bind(this));\n            this.rock2.addEventListener('collision', function (eventObject) {\n                if (eventObject.name === \"Ground\" || eventObject.name === \"Wall\") {\n                    this.resetHazards();\n                }\n            }.bind(this));\n            this.rock3.addEventListener('collision', function (eventObject) {\n                if (eventObject.name === \"Ground\" || eventObject.name === \"Wall\") {\n                    this.resetHazards();\n                }\n            }.bind(this));\n            this.log.addEventListener('collision', function (eventObject) {\n                if (eventObject.name === \"Ground\" || eventObject.name === \"Wall\") {\n                    this.resetHazards();\n                }\n            }.bind(this));\n            // create parent-child relationship with camera and player\n            this.player.add(camera);\n            camera.position.set(0, 1, 0);\n            this.simulate();\n        };\n        /**\n         * Pick any collectable function\n         *\n         * @method collectablePicked\n         * @return void\n         */\n        Level1.prototype.collectablePicked = function (collectable) {\n            this.remove(collectable);\n            if (collectable.name === \"Berry\") {\n                this.berryNum = this.berryNum === (this.berryLocation.length - 1) ? 0 : (this.berryNum + 1);\n                collectable.position.x = this.berryLocation[this.berryNum].x;\n                collectable.position.y = this.berryLocation[this.berryNum].y;\n                collectable.position.z = this.berryLocation[this.berryNum].z;\n                this.scoreValue += 2;\n            }\n            if (collectable.name === \"Basket\") {\n                this.basketNum = this.basketNum === (this.basketLocation.length - 1) ? 0 : (this.basketNum + 1);\n                collectable.position.x = this.basketLocation[this.basketNum].x;\n                collectable.position.y = this.basketLocation[this.basketNum].y;\n                collectable.position.z = this.basketLocation[this.basketNum].z;\n                this.scoreValue += 5;\n            }\n            this.scoreLabel.text = \"SCORE: \" + this.scoreValue;\n            this.add(collectable);\n        };\n        /**\n         * add death function\n         *\n         * @method addDeath\n         * @return void\n         */\n        Level1.prototype.addDeath = function () {\n            this.livesValue--;\n            if (this.livesValue <= 0) {\n                // Exit Pointer Lock\n                document.exitPointerLock();\n                this.children = []; // an attempt to clean up\n                //this._isGamePaused = true;\n                // Play the Game Over Scene\n                currentScene = config.Scene.OVER;\n                changeScene();\n            }\n            else {\n                // otherwise reset my player and update Lives\n                this.livesLabel.text = \"LIVES: \" + this.livesValue;\n                this.remove(this.player);\n                this.player.position.set(0, 20, 0);\n                this.add(this.player);\n            }\n        };\n        /**\n         * add level change function\n         *\n         * @method addLevelChange\n         * @return void\n         */\n        Level1.prototype.addLevelChange = function () {\n            if (this.scoreValue > 1) {\n                this.children = []; // an attempt to clean up\n                //this._isGamePaused = true;\n                // Play the Level2 Scene\n                currentScene = config.Scene.LEVEL2;\n                changeScene();\n            }\n        };\n        /**\n         * Camera Look function\n         *\n         * @method cameraLook\n         * @return void\n         */\n        Level1.prototype.cameraLook = function () {\n            var zenith = THREE.Math.degToRad(90);\n            var nadir = THREE.Math.degToRad(-90);\n            var cameraPitch = camera.rotation.x + this.mouseControls.pitch;\n            // Constrain the Camera Pitch\n            camera.rotation.x = THREE.Math.clamp(cameraPitch, nadir, zenith);\n        };\n        /**\n         * @method update\n         * @returns void\n         */\n        Level1.prototype.update = function () {\n            /*\n            this.coins.forEach(coin => {\n                coin.setAngularFactor(new Vector3(0, 0, 0));\n                coin.setAngularVelocity(new Vector3(0, 1, 0));\n            });\n            */\n            this.checkControls();\n            this.stage.update();\n            this.addLevelChange();\n            if (!this.keyboardControls.paused) {\n                this.simulate();\n            }\n        };\n        /**\n         * Responds to screen resizes\n         *\n         * @method resize\n         * @return void\n         */\n        Level1.prototype.resize = function () {\n            canvas.style.width = \"100%\";\n            this.livesLabel.x = config.Screen.WIDTH * 0.1;\n            this.livesLabel.y = (config.Screen.HEIGHT * 0.15) * 0.20;\n            this.scoreLabel.x = config.Screen.WIDTH * 0.8;\n            this.scoreLabel.y = (config.Screen.HEIGHT * 0.15) * 0.20;\n            this.stage.update();\n        };\n        return Level1;\n    }(scenes.Scene));\n    scenes.Level1 = Level1;\n})(scenes || (scenes = {}));\n\n//# sourceMappingURL=level1.js.map\n","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * The Scenes module is a namespace to reference all scene objects\n *\n * @module scenes\n */\nvar scenes;\n(function (scenes) {\n    /**\n     * The Level2 class is where the main action occurs for the game\n     *\n     * @class Level2\n     * @param havePointerLock {boolean}\n     */\n    var Level2 = (function (_super) {\n        __extends(Level2, _super);\n        /**\n         * @constructor\n         */\n        function Level2() {\n            _super.call(this);\n            this.berryLocation = new Array();\n            this.berryNum = 0;\n            this.basketLocation = new Array();\n            this.basketNum = 0;\n            this._initialize();\n            this.start();\n        }\n        // PRIVATE METHODS ++++++++++++++++++++++++++++++++++++++++++\n        /**\n         * Sets up the initial canvas for the play scene\n         *\n         * @method setupCanvas\n         * @return void\n         */\n        Level2.prototype._setupCanvas = function () {\n            canvas.setAttribute(\"width\", config.Screen.WIDTH.toString());\n            canvas.setAttribute(\"height\", (config.Screen.HEIGHT * 0.1).toString());\n            canvas.style.backgroundColor = \"#000000\";\n        };\n        /**\n        * Sets up the background scene for the play scene\n        *\n        * @method playBackgroundSound\n        * @return void\n        */\n        Level2.prototype.playBackgroundSound = function () {\n            this.bgSound = createjs.Sound.play(\"Background\", { volume: 0.02 });\n            this.bgSound.on(\"complete\", this.playBackgroundSound, this);\n        };\n        /**\n         * The initialize method sets up key objects to be used in the scene\n         *\n         * @method _initialize\n         * @returns void\n         */\n        Level2.prototype._initialize = function () {\n            // Create to HTMLElements\n            this.blocker = document.getElementById(\"blocker\");\n            this.instructions = document.getElementById(\"instructions\");\n            this.blocker.style.display = \"block\";\n            // setup canvas for menu scene\n            this._setupCanvas();\n            this.coinCount = 10;\n            this.prevTime = 0;\n            this.stage = new createjs.Stage(canvas);\n            this.velocity = new Vector3(0, 0, 0);\n            // setup a THREE.JS Clock object\n            this.clock = new Clock();\n            // Instantiate Game Controls\n            this.keyboardControls = new objects.KeyboardControls();\n            this.mouseControls = new objects.MouseControls();\n        };\n        /**\n         * This method sets up the scoreboard for the scene\n         *\n         * @method setupScoreboard\n         * @returns void\n         */\n        Level2.prototype.setupScoreboard = function () {\n            // initialize  score and lives values\n            this.scoreValue = 0;\n            this.livesValue = 1;\n            // Add Lives Label\n            this.livesLabel = new createjs.Text(\"LIVES: \" + this.livesValue, \"40px Consolas\", \"#ffffff\");\n            this.livesLabel.x = config.Screen.WIDTH * 0.1;\n            this.livesLabel.y = (config.Screen.HEIGHT * 0.15) * 0.20;\n            this.stage.addChild(this.livesLabel);\n            console.log(\"Added Lives Label to stage\");\n            // Add Level Label\n            this.levelLabel = new createjs.Text(\"LEVEL 2\", \"40px Consolas\", \"#ffffff\");\n            this.levelLabel.x = config.Screen.WIDTH * 0.45;\n            this.levelLabel.y = (config.Screen.HEIGHT * 0.15) * 0.20;\n            this.stage.addChild(this.levelLabel);\n            console.log(\"Added Lives Label to stage\");\n            // Add Score Label\n            this.scoreLabel = new createjs.Text(\"SCORE: \" + this.scoreValue, \"40px Consolas\", \"#ffffff\");\n            this.scoreLabel.x = config.Screen.WIDTH * 0.8;\n            this.scoreLabel.y = (config.Screen.HEIGHT * 0.15) * 0.20;\n            this.stage.addChild(this.scoreLabel);\n            console.log(\"Added Score Label to stage\");\n        };\n        /**\n         * Add lights to the scene\n         *\n         * @method addLights\n         * @return void\n         */\n        Level2.prototype.addLights = function () {\n            // Spot Light\n            this.spotLight = new SpotLight(0xffffff);\n            this.spotLight.position.set(20, 50, -15);\n            this.spotLight.castShadow = true;\n            this.spotLight.intensity = 2;\n            this.spotLight.lookAt(new Vector3(0, 0, 0));\n            this.spotLight.shadowCameraNear = 2;\n            this.spotLight.shadowCameraFar = 200;\n            this.spotLight.shadowCameraLeft = -5;\n            this.spotLight.shadowCameraRight = 5;\n            this.spotLight.shadowCameraTop = 5;\n            this.spotLight.shadowCameraBottom = -5;\n            this.spotLight.shadowMapWidth = 2048;\n            this.spotLight.shadowMapHeight = 2048;\n            this.spotLight.shadowDarkness = 0.5;\n            this.spotLight.name = \"Spot Light\";\n            this.add(this.spotLight);\n            //AmbientLight\n            this.ambientLight = new AmbientLight(0x404040);\n            this.add(this.ambientLight);\n            console.log(\"Added Lights to scene\");\n        };\n        /**\n         * Add a ground plane to the scene\n         *\n         * @method addGround\n         * @return void\n         */\n        Level2.prototype.addGround = function () {\n            this.groundTexture = new THREE.TextureLoader().load('../../Assets/images/grass.png');\n            this.groundTexture.wrapS = THREE.RepeatWrapping;\n            this.groundTexture.wrapT = THREE.RepeatWrapping;\n            this.groundTexture.repeat.set(8, 8);\n            this.groundMaterial = new PhongMaterial();\n            this.groundMaterial.map = this.groundTexture;\n            this.groundGeometry = new BoxGeometry(12, 1, 10);\n            this.groundPhysicsMaterial = Physijs.createMaterial(this.groundMaterial, 0, 0);\n            this.ground = new Physijs.ConvexMesh(this.groundGeometry, this.groundPhysicsMaterial, 0);\n            this.ground.position.set(-4.5, 0, 0);\n            this.ground.receiveShadow = true;\n            this.ground.name = \"Ground\";\n            this.add(this.ground);\n            console.log(\"Added Burnt Ground to scene\");\n            this.ground23Geometry = new BoxGeometry(6, 1, 5);\n            this.ground2 = new Physijs.ConvexMesh(this.ground23Geometry, this.groundPhysicsMaterial, 0);\n            this.ground2.position.set(-13.5, 0, -2.5);\n            this.ground2.receiveShadow = true;\n            this.ground2.name = \"Ground23\";\n            this.add(this.ground2);\n            console.log(\"Added Ground 2 to scene\");\n            this.ground3 = new Physijs.ConvexMesh(this.ground23Geometry, this.groundPhysicsMaterial, 0);\n            this.ground3.position.set(-13.5, 0, 2.5);\n            this.ground3.receiveShadow = true;\n            this.ground3.name = \"Ground23\";\n            this.add(this.ground3);\n            console.log(\"Added Ground 3 to scene\");\n            this.ground4Geometry = new BoxGeometry(25, 1, 10);\n            this.ground4 = new Physijs.ConvexMesh(this.ground4Geometry, this.groundPhysicsMaterial, 0);\n            this.ground4.position.set(-29, 0, 0);\n            this.ground4.receiveShadow = true;\n            this.ground4.name = \"Ground23\";\n            this.add(this.ground4);\n            console.log(\"Added Ground 4 to scene\");\n        };\n        /**\n         * Add walls to the scene\n         *\n         * @method addWalls\n         * @return void\n         */\n        Level2.prototype.addWalls = function () {\n            this.wallTexture = new THREE.TextureLoader().load('../../Assets/images/wall.png');\n            this.wallTexture.wrapS = THREE.RepeatWrapping;\n            this.wallTexture.wrapT = THREE.RepeatWrapping;\n            this.wallTexture.repeat.set(8, 8);\n            this.wallMaterial = new PhongMaterial();\n            this.wallMaterial.map = this.wallTexture;\n            this.wallGeometry = new BoxGeometry(10, 4, .5);\n            this.wallPhysicsMaterial = Physijs.createMaterial(this.wallMaterial, 0, 0);\n            this.wall1 = new Physijs.ConvexMesh(this.wallGeometry, this.wallPhysicsMaterial, 0);\n            this.wall1.position.set(-7.5, 2, 0);\n            this.wall1.receiveShadow = true;\n            this.wall1.name = \"Wall\";\n            this.add(this.wall1);\n            this.wall2 = new Physijs.ConvexMesh(this.wallGeometry, this.wallPhysicsMaterial, 0);\n            this.wall2.position.set(-20.5, 2, 0);\n            this.wall2.receiveShadow = true;\n            this.wall2.name = \"Wall\";\n            this.add(this.wall2);\n            this.wall3 = new Physijs.ConvexMesh(this.wallGeometry, this.wallPhysicsMaterial, 0);\n            this.wall3.position.set(-33, 2, 0);\n            this.wall3.receiveShadow = true;\n            this.wall3.name = \"Wall\";\n            this.add(this.wall3);\n        };\n        /**\n        * Add rocks to the scene - actually it just prepare the rock, who really add it to the scene is the pressure plate\n        *\n        * @method addRocks\n        * @return void\n        */\n        Level2.prototype.addRocks = function () {\n            this.rockTexture = new THREE.TextureLoader().load('../../Assets/images/rock.png');\n            this.rockTexture.wrapS = THREE.RepeatWrapping;\n            this.rockTexture.wrapT = THREE.RepeatWrapping;\n            this.rockMaterial = new PhongMaterial();\n            this.rockMaterial.map = this.rockTexture;\n            this.rockGeometry = new SphereGeometry(1, 5, 5);\n            this.rockPhysicsMaterial = Physijs.createMaterial(this.rockMaterial, 0, 0);\n            this.rock1 = new Physijs.ConvexMesh(this.rockGeometry, this.rockPhysicsMaterial, 1);\n            this.rock1.position.set(-7.8, 10, 2.8);\n            this.rock1.receiveShadow = true;\n            this.rock1.name = \"Rock\";\n        };\n        /**\n         * Add Logs to the scene - actually it just prepare the rock, who really add it to the scene is the pressure plate\n         *\n         * @method addLogs\n         * @return void\n         */\n        Level2.prototype.addLogs = function () {\n            this.logTexture = new THREE.TextureLoader().load('../../Assets/images/fallingbranch.png');\n            this.logTexture.wrapS = THREE.RepeatWrapping;\n            this.logTexture.wrapT = THREE.RepeatWrapping;\n            this.logMaterial = new PhongMaterial();\n            this.logMaterial.map = this.logTexture;\n            this.logGeometry = new CylinderGeometry(1, 1, 10);\n            this.logPhysicsMaterial = Physijs.createMaterial(this.logMaterial, 0, 0);\n            this.log = new Physijs.ConvexMesh(this.logGeometry, this.logPhysicsMaterial, 1);\n            this.log.rotation.x = 1.5708;\n            this.log.rotation.z = 1.5708;\n            this.log.position.set(-27, 10, -2.7);\n            this.log.receiveShadow = true;\n            this.log.name = \"Log\";\n        };\n        /**\n         * Add Pressure Plates to the scene\n         *\n         * @method addPlates\n         * @return void\n         */\n        Level2.prototype.addPlates = function () {\n            this.plateTexture = new THREE.TextureLoader().load('../../Assets/images/PressurePlate.jpg');\n            this.plateTexture.wrapS = THREE.RepeatWrapping;\n            this.plateTexture.wrapT = THREE.RepeatWrapping;\n            this.plateMaterial = new PhongMaterial();\n            this.plateMaterial.map = this.plateTexture;\n            this.plateGeometry = new CubeGeometry(2, 0.001, 2);\n            this.platePhysicsMaterial = Physijs.createMaterial(this.plateMaterial, 0, 0);\n            this.plate1 = new Physijs.ConvexMesh(this.plateGeometry, this.platePhysicsMaterial, 0);\n            this.plate1.position.set(-5.8, 0.5, 2.8);\n            this.plate1.receiveShadow = true;\n            this.plate1.name = \"Plate1\";\n            this.add(this.plate1);\n            this.plate2 = new Physijs.ConvexMesh(this.plateGeometry, this.platePhysicsMaterial, 0);\n            this.plate2.position.set(-13, 0.5, -2.6);\n            this.plate2.receiveShadow = true;\n            this.plate2.name = \"Plate2\";\n            this.add(this.plate2);\n            this.plate3 = new Physijs.ConvexMesh(this.plateGeometry, this.platePhysicsMaterial, 0);\n            this.plate3.position.set(-21, 0.5, 2.7);\n            this.plate3.receiveShadow = true;\n            this.plate3.name = \"Plate3\";\n            this.add(this.plate3);\n            this.plate4 = new Physijs.ConvexMesh(this.plateGeometry, this.platePhysicsMaterial, 0);\n            this.plate4.position.set(-27, 0.5, -2.7);\n            this.plate4.receiveShadow = true;\n            this.plate4.name = \"Plate4\";\n            this.add(this.plate4);\n            this.plate5 = new Physijs.ConvexMesh(this.plateGeometry, this.platePhysicsMaterial, 0);\n            this.plate5.position.set(-32, 0.5, 2.3);\n            this.plate5.receiveShadow = true;\n            this.plate5.name = \"Plate5\";\n            this.add(this.plate5);\n        };\n        /**\n         * Reset all hazards function\n         *\n         * @method resetHazards\n         * @return void\n         */\n        Level2.prototype.resetHazards = function () {\n            this.remove(this.rock1);\n            this.remove(this.log);\n            //this.remove(this.wall2);\n            this.rock1.position.set(-7.8, 10, 2.8);\n            this.log.position.set(-27, 10, -2.7);\n            //this.wall2.position.set(-20.5, 2, 0);\n        };\n        /**\n         * Adds the player controller to the scene\n         *\n         * @method addPlayer\n         * @return void\n         */\n        Level2.prototype.addPlayer = function () {\n            // Player Object\n            this.playerGeometry = new BoxGeometry(2, 4, 2);\n            this.playerMaterial = Physijs.createMaterial(new LambertMaterial({ color: 0x00ff00 }), 0.4, 0);\n            this.player = new Physijs.BoxMesh(this.playerGeometry, this.playerMaterial, 1);\n            this.player.position.set(0, 5, 0);\n            this.player.receiveShadow = true;\n            this.player.castShadow = true;\n            this.player.name = \"Player\";\n            this.add(this.player);\n            console.log(\"Added Player to Scene\");\n            this.player.setAngularFactor(new THREE.Vector3(0, 0, 0));\n        };\n        /**\n         * Add the death plane to the scene\n         *\n         * @method addDeathPlane\n         * @return void\n         */\n        Level2.prototype.addDeathPlane = function () {\n            this.deathPlaneGeometry = new BoxGeometry(100, 1, 100);\n            this.deathPlaneMaterial = new THREE.MeshLambertMaterial({ color: 0xE5E5FF, transparent: true, opacity: 0.1 });\n            this.deathPlane = new Physijs.BoxMesh(this.deathPlaneGeometry, this.deathPlaneMaterial, 0);\n            this.deathPlane.position.set(0, -20, 0);\n            this.deathPlane.name = \"DeathPlane\";\n            this.add(this.deathPlane);\n            console.log(\"Added DeathPlane to scene\");\n        };\n        /**\n         * Add the Skybox to the scene\n         *\n         * @method addSkyBox\n         * @return void\n         */\n        Level2.prototype.addSkyBox = function () {\n            this.skyBoxTexture = new THREE.TextureLoader().load('../../Assets/images/skyBG.png');\n            this.skyBox = new gameObject(new SphereGeometry(60, 60, 60), new LambertMaterial({ map: this.skyBoxTexture }), 2, 2, 2);\n            this.skyBox.material.side = THREE.DoubleSide;\n            this.skyBox.name = \"Skybox\";\n            this.add(this.skyBox);\n            console.log(\"Added skyBox to scene\");\n        };\n        /**\n         * Add Berry to the scene\n         *\n         * @method addBerry\n         * @return void\n         */\n        Level2.prototype.addBerry = function () {\n            this.berryTexture = new THREE.TextureLoader().load('../../Assets/images/berry.png');\n            this.berryTexture.wrapS = THREE.RepeatWrapping;\n            this.berryTexture.wrapT = THREE.RepeatWrapping;\n            this.berryMaterial = new PhongMaterial();\n            this.berryMaterial.map = this.berryTexture;\n            this.berryGeometry = new BoxGeometry(.5, .5, .5);\n            this.berryPhysicsMaterial = Physijs.createMaterial(this.berryMaterial, 0, 0);\n            this.berry = new Physijs.ConvexMesh(this.berryGeometry, this.berryPhysicsMaterial, 0);\n            this.berry.position.set(-9.5, 1.5, 2.8);\n            this.berry.receiveShadow = true;\n            this.berry.name = \"Berry\";\n            this.add(this.berry);\n            console.log(\"Added Berry to scene\");\n        };\n        /**\n         * Add Basket to the scene\n         *\n         * @method addBasket\n         * @return void\n         */\n        Level2.prototype.addBasket = function () {\n            this.basketTexture = new THREE.TextureLoader().load('../../Assets/images/bask.png');\n            this.basketTexture.wrapS = THREE.RepeatWrapping;\n            this.basketTexture.wrapT = THREE.RepeatWrapping;\n            this.basketMaterial = new PhongMaterial();\n            this.basketMaterial.map = this.basketTexture;\n            this.basketGeometry = new BoxGeometry(.5, .5, .5);\n            this.basketPhysicsMaterial = Physijs.createMaterial(this.basketMaterial, 0, 0);\n            this.basket = new Physijs.ConvexMesh(this.basketGeometry, this.basketPhysicsMaterial, 0);\n            this.basket.position.set(-14, 3, -2.6);\n            this.basket.receiveShadow = true;\n            this.basket.name = \"Basket\";\n            this.add(this.basket);\n            console.log(\"Added basket to scene\");\n        };\n        /**\n         * This method adds a coin to the scene\n         *\n         * @method addCoinMesh\n         * @return void\n         */\n        Level2.prototype.addCoinMesh = function () {\n            var self = this;\n            this.coins = new Array(); // Instantiate a convex mesh array\n            var coinLoader = new THREE.JSONLoader().load(\"../../Assets/imported/coin.json\", function (geometry) {\n                var phongMaterial = new PhongMaterial({ color: 0xE7AB32 });\n                phongMaterial.emissive = new THREE.Color(0xE7AB32);\n                var coinMaterial = Physijs.createMaterial((phongMaterial), 0.4, 0.6);\n                for (var count = 0; count < self.coinCount; count++) {\n                    self.coins[count] = new Physijs.ConvexMesh(geometry, coinMaterial);\n                    self.coins[count].receiveShadow = true;\n                    self.coins[count].castShadow = true;\n                    self.coins[count].name = \"Coin\";\n                    self.setCoinPosition(self.coins[count]);\n                    console.log(\"Added Coin Mesh to Scene, at position: \" + self.coins[count].position);\n                }\n            });\n        };\n        /**\n         * This method randomly sets the coin object's position\n         *\n         * @method setCoinPosition\n         * @return void\n         */\n        Level2.prototype.setCoinPosition = function (coin) {\n            var randomPointX = Math.floor(Math.random() * 20) - 10;\n            var randomPointZ = Math.floor(Math.random() * 20) - 10;\n            coin.position.set(randomPointX, 10, randomPointZ);\n            console.log(randomPointX);\n            console.log(randomPointZ);\n            this.add(coin);\n        };\n        /**\n         * Event Handler method for any pointerLockChange events\n         *\n         * @method pointerLockChange\n         * @return void\n         */\n        Level2.prototype.pointerLockChange = function (event) {\n            if (document.pointerLockElement === this.element) {\n                // enable our mouse and keyboard controls\n                this.keyboardControls.enabled = true;\n                this.mouseControls.enabled = true;\n                this.blocker.style.display = 'none';\n            }\n            else {\n                if (this.livesValue <= 0) {\n                    this.blocker.style.display = 'none';\n                    document.removeEventListener('pointerlockchange', this.pointerLockChange.bind(this), false);\n                    document.removeEventListener('mozpointerlockchange', this.pointerLockChange.bind(this), false);\n                    document.removeEventListener('webkitpointerlockchange', this.pointerLockChange.bind(this), false);\n                    document.removeEventListener('pointerlockerror', this.pointerLockError.bind(this), false);\n                    document.removeEventListener('mozpointerlockerror', this.pointerLockError.bind(this), false);\n                    document.removeEventListener('webkitpointerlockerror', this.pointerLockError.bind(this), false);\n                }\n                else {\n                    this.blocker.style.display = '-webkit-box';\n                    this.blocker.style.display = '-moz-box';\n                    this.blocker.style.display = 'box';\n                    this.instructions.style.display = '';\n                }\n                // disable our mouse and keyboard controls\n                this.keyboardControls.enabled = false;\n                this.mouseControls.enabled = false;\n                console.log(\"PointerLock disabled\");\n            }\n        };\n        /**\n         * Event handler for PointerLockError\n         *\n         * @method pointerLockError\n         * @return void\n         */\n        Level2.prototype.pointerLockError = function (event) {\n            this.instructions.style.display = '';\n            console.log(\"PointerLock Error Detected!!\");\n        };\n        // Check Controls Function\n        /**\n         * This method updates the player's position based on user input\n         *\n         * @method checkControls\n         * @return void\n         */\n        Level2.prototype.checkControls = function () {\n            if (this.keyboardControls.enabled) {\n                this.velocity = new Vector3();\n                var time = performance.now();\n                var delta = (time - this.prevTime) / 1000;\n                var speed = 600.0;\n                //if (this.isGrounded) {\n                var direction = new Vector3(0, 0, 0);\n                if (this.keyboardControls.moveForward) {\n                    this.velocity.z -= speed * delta;\n                }\n                if (this.keyboardControls.moveLeft) {\n                    this.velocity.x -= speed * delta;\n                }\n                if (this.keyboardControls.moveBackward) {\n                    this.velocity.z += speed * delta;\n                }\n                if (this.keyboardControls.moveRight) {\n                    this.velocity.x += speed * delta;\n                }\n                if (this.keyboardControls.jump && this.isGrounded) {\n                    if (this.player.position.y >= 1 && this.player.position.y <= 3) {\n                        this.velocity.y += 10 * speed * delta;\n                    }\n                    else if (this.player.position.y > 3) {\n                        this.isGrounded = false;\n                        createjs.Sound.play(\"jump\");\n                    }\n                }\n                this.player.setDamping(0.7, 0.1);\n                // Changing player's rotation\n                this.player.setAngularVelocity(new Vector3(0, this.mouseControls.yaw, 0));\n                direction.addVectors(direction, this.velocity);\n                direction.applyQuaternion(this.player.quaternion);\n                if (Math.abs(this.player.getLinearVelocity().x) < 20 && Math.abs(this.player.getLinearVelocity().y) < 10) {\n                    this.player.applyCentralForce(direction);\n                }\n                this.cameraLook();\n                //} // isGrounded ends\n                //reset Pitch and Yaw\n                this.mouseControls.pitch = 0;\n                this.mouseControls.yaw = 0;\n                this.prevTime = time;\n            } // Controls Enabled ends\n            else {\n                this.player.setAngularVelocity(new Vector3(0, 0, 0));\n            }\n        };\n        Level2.prototype._unpauseSimulation = function () {\n            scene.onSimulationResume();\n            console.log(\"resume simulation\");\n        };\n        //Code to move wall - buggy\n        // private render(): void{\n        //     requestAnimationFrame(this.render.bind(this));\n        //     this.wall2.position.z += 1;\n        //     this.player.position.z += 1;\n        //     renderer.render(scene, camera);\n        //}\n        // PUBLIC METHODS +++++++++++++++++++++++++++++++++++++++++++\n        /**\n         * The start method is the main method for the scene class\n         *\n         * @method start\n         * @return void\n         */\n        Level2.prototype.start = function () {\n            var _this = this;\n            // Set Up Scoreboard\n            this.setupScoreboard();\n            // Set Up background sound\n            this.playBackgroundSound();\n            //check to see if pointerlock is supported\n            this.havePointerLock = 'pointerLockElement' in document ||\n                'mozPointerLockElement' in document ||\n                'webkitPointerLockElement' in document;\n            //define berry positions        \n            this.berryLocation.push(new THREE.Vector3(-9.5, 1.5, 2.8));\n            this.berryLocation.push(new THREE.Vector3(-27, 1.5, 0));\n            this.berryLocation.push(new THREE.Vector3(-34, 1.5, -2.6));\n            //define basket positions\n            this.basketLocation.push(new THREE.Vector3(-14, 3, -2.6));\n            this.basketLocation.push(new THREE.Vector3(-40, 3, -1.4));\n            // Check to see if we have pointerLock\n            if (this.havePointerLock) {\n                this.element = document.body;\n                this.instructions.addEventListener('click', function () {\n                    // Ask the user for pointer lock\n                    console.log(\"Requesting PointerLock\");\n                    _this.element.requestPointerLock = _this.element.requestPointerLock ||\n                        _this.element.mozRequestPointerLock ||\n                        _this.element.webkitRequestPointerLock;\n                    _this.element.requestPointerLock();\n                });\n                document.addEventListener('pointerlockchange', this.pointerLockChange.bind(this), false);\n                document.addEventListener('mozpointerlockchange', this.pointerLockChange.bind(this), false);\n                document.addEventListener('webkitpointerlockchange', this.pointerLockChange.bind(this), false);\n                document.addEventListener('pointerlockerror', this.pointerLockError.bind(this), false);\n                document.addEventListener('mozpointerlockerror', this.pointerLockError.bind(this), false);\n                document.addEventListener('webkitpointerlockerror', this.pointerLockError.bind(this), false);\n            }\n            // Scene changes for Physijs\n            this.name = \"Main\";\n            this.fog = new THREE.Fog(0xffffff, 0, 750);\n            this.setGravity(new THREE.Vector3(0, -10, 0));\n            // start simulation\n            /*\n            this.addEventListener('update', this._simulateScene);\n            console.log(\"Start Simulation\"); */\n            // Add Spot Light to the scene\n            this.addLights();\n            // Ground Object\n            this.addGround();\n            //Add Walls in the scenario\n            this.addWalls();\n            //Add Rocks in the scenario\n            this.addRocks();\n            //Add Logs in the scenario\n            this.addLogs();\n            //Add the pressure plates in the scenario\n            this.addPlates();\n            //Reset the first time\n            this.resetHazards();\n            // Add player controller\n            this.addPlayer();\n            // Add custom coin imported from Blender\n            //this.addCoinMesh();\n            // Add death plane to the scene\n            this.addDeathPlane();\n            // Add Skybox to the scene\n            this.addSkyBox();\n            this.addBasket();\n            this.addBerry();\n            // Collision Check\n            this.player.addEventListener('collision', function (eventObject) {\n                if (eventObject.name === \"Ground\" || eventObject.name === \"Wall\") {\n                    this.isGrounded = true;\n                    createjs.Sound.play(\"land\");\n                }\n                if (eventObject.name === \"Wall\") {\n                    console.log(\"WALL HIT\");\n                }\n                if (eventObject.name === \"DeathPlane\") {\n                    createjs.Sound.play(\"Falling\");\n                    this.addDeath();\n                }\n                if (eventObject.name === \"Berry\") {\n                    createjs.Sound.play(\"Collect\");\n                    this.collectablePicked(eventObject);\n                    console.log(\"player ate a berry\");\n                }\n                if (eventObject.name === \"Basket\") {\n                    createjs.Sound.play(\"Collect\");\n                    this.collectablePicked(eventObject);\n                    console.log(\"player ate a basket\");\n                }\n                if (eventObject.name === \"Plate1\") {\n                    this.add(this.rock1);\n                }\n                if (eventObject.name === \"Plate2\") {\n                    this.remove(this.ground2);\n                    this.remove(this.plate2);\n                }\n                if (eventObject.name === \"Plate3\") {\n                    //this.render();\n                    console.log(\"Move wall\");\n                }\n                if (eventObject.name === \"Plate4\") {\n                    this.add(this.log);\n                }\n                if (eventObject.name === \"Rock\" || eventObject.name === \"Log\" && eventObject.position.y > 2) {\n                    createjs.Sound.play(\"Collision\");\n                    this.addDeath();\n                }\n                /*\n                if (eventObject.name === \"Coin\") {\n                    createjs.Sound.play(\"coin\");\n                    this.remove(eventObject);\n                    this.setCoinPosition(eventObject);\n                    this.scoreValue += 100;\n                    this.scoreLabel.text = \"SCORE: \" + this.scoreValue;\n                }*/\n            }.bind(this));\n            //Rock eventHandler            \n            this.rock1.addEventListener('collision', function (eventObject) {\n                if (eventObject.name === \"Ground\" || eventObject.name === \"Wall\") {\n                    this.resetHazards();\n                }\n            }.bind(this));\n            this.log.addEventListener('collision', function (eventObject) {\n                if (eventObject.name === \"Ground\" || eventObject.name === \"Wall\") {\n                    this.resetHazards();\n                }\n            }.bind(this));\n            // create parent-child relationship with camera and player\n            this.player.add(camera);\n            camera.position.set(0, 1, 0);\n            this.simulate();\n        };\n        /**\n         * Pick any collectable function\n         *\n         * @method collectablePicked\n         * @return void\n         */\n        Level2.prototype.collectablePicked = function (collectable) {\n            this.remove(collectable);\n            if (collectable.name === \"Berry\") {\n                this.berryNum = this.berryNum === (this.berryLocation.length - 1) ? 0 : (this.berryNum + 1);\n                collectable.position.x = this.berryLocation[this.berryNum].x;\n                collectable.position.y = this.berryLocation[this.berryNum].y;\n                collectable.position.z = this.berryLocation[this.berryNum].z;\n                this.scoreValue += 2;\n            }\n            if (collectable.name === \"Basket\") {\n                this.basketNum = this.basketNum === (this.basketLocation.length - 1) ? 0 : (this.basketNum + 1);\n                collectable.position.x = this.basketLocation[this.basketNum].x;\n                collectable.position.y = this.basketLocation[this.basketNum].y;\n                collectable.position.z = this.basketLocation[this.basketNum].z;\n                this.scoreValue += 5;\n            }\n            this.scoreLabel.text = \"SCORE: \" + this.scoreValue;\n            this.add(collectable);\n        };\n        /**\n         * add death function\n         *\n         * @method addDeath\n         * @return void\n         */\n        Level2.prototype.addDeath = function () {\n            this.livesValue--;\n            if (this.livesValue <= 0) {\n                // Exit Pointer Lock\n                document.exitPointerLock();\n                this.children = []; // an attempt to clean up\n                //this._isGamePaused = true;\n                // Play the Game Over Scene\n                currentScene = config.Scene.OVER;\n                changeScene();\n            }\n            else {\n                // otherwise reset my player and update Lives\n                this.livesLabel.text = \"LIVES: \" + this.livesValue;\n                this.remove(this.player);\n                this.player.position.set(0, 20, 0);\n                this.add(this.player);\n            }\n        };\n        /**\n         * add level change function\n         *\n         * @method addLevelChange\n         * @return void\n         */\n        Level2.prototype.addLevelChange = function () {\n            if (this.scoreValue > 1) {\n                // Exit Pointer Lock\n                document.exitPointerLock();\n                this.children = []; // an attempt to clean up\n                //this._isGamePaused = true;\n                // Play the Level3 Scene\n                currentScene = config.Scene.LEVEL3;\n                changeScene();\n            }\n        };\n        /**\n         * Camera Look function\n         *\n         * @method cameraLook\n         * @return void\n         */\n        Level2.prototype.cameraLook = function () {\n            var zenith = THREE.Math.degToRad(90);\n            var nadir = THREE.Math.degToRad(-90);\n            var cameraPitch = camera.rotation.x + this.mouseControls.pitch;\n            // Constrain the Camera Pitch\n            camera.rotation.x = THREE.Math.clamp(cameraPitch, nadir, zenith);\n        };\n        /**\n         * @method update\n         * @returns void\n         */\n        Level2.prototype.update = function () {\n            /*\n            this.coins.forEach(coin => {\n                coin.setAngularFactor(new Vector3(0, 0, 0));\n                coin.setAngularVelocity(new Vector3(0, 1, 0));\n            });\n            */\n            this.checkControls();\n            this.stage.update();\n            if (!this.keyboardControls.paused) {\n                this.simulate();\n            }\n        };\n        /**\n         * Responds to screen resizes\n         *\n         * @method resize\n         * @return void\n         */\n        Level2.prototype.resize = function () {\n            canvas.style.width = \"100%\";\n            this.livesLabel.x = config.Screen.WIDTH * 0.1;\n            this.livesLabel.y = (config.Screen.HEIGHT * 0.15) * 0.20;\n            this.scoreLabel.x = config.Screen.WIDTH * 0.8;\n            this.scoreLabel.y = (config.Screen.HEIGHT * 0.15) * 0.20;\n            this.stage.update();\n        };\n        return Level2;\n    }(scenes.Scene));\n    scenes.Level2 = Level2;\n})(scenes || (scenes = {}));\n\n//# sourceMappingURL=level2.js.map\n","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * The Scenes module is a namespace to reference all scene objects\n *\n * @module scenes\n */\nvar scenes;\n(function (scenes) {\n    /**\n     * The Level3 class is where the main action occurs for the game\n     *\n     * @class Level3\n     * @param havePointerLock {boolean}\n     */\n    var Level3 = (function (_super) {\n        __extends(Level3, _super);\n        /**\n         * @constructor\n         */\n        function Level3() {\n            _super.call(this);\n            this.berryLocation = new Array();\n            this.berryNum = 0;\n            this.basketLocation = new Array();\n            this.basketNum = 0;\n            this._initialize();\n            this.start();\n        }\n        // PRIVATE METHODS ++++++++++++++++++++++++++++++++++++++++++\n        /**\n         * Sets up the initial canvas for the play scene\n         *\n         * @method setupCanvas\n         * @return void\n         */\n        Level3.prototype._setupCanvas = function () {\n            canvas.setAttribute(\"width\", config.Screen.WIDTH.toString());\n            canvas.setAttribute(\"height\", (config.Screen.HEIGHT * 0.1).toString());\n            canvas.style.backgroundColor = \"#000000\";\n        };\n        /**\n        * Sets up the background scene for the play scene\n        *\n        * @method playBackgroundSound\n        * @return void\n        */\n        Level3.prototype.playBackgroundSound = function () {\n            this.bgSound = createjs.Sound.play(\"Background\", { volume: 0.02 });\n            this.bgSound.on(\"complete\", this.playBackgroundSound, this);\n        };\n        /**\n         * The initialize method sets up key objects to be used in the scene\n         *\n         * @method _initialize\n         * @returns void\n         */\n        Level3.prototype._initialize = function () {\n            // Create to HTMLElements\n            this.blocker = document.getElementById(\"blocker\");\n            this.instructions = document.getElementById(\"instructions\");\n            this.blocker.style.display = \"block\";\n            // setup canvas for menu scene\n            this._setupCanvas();\n            this.coinCount = 10;\n            this.prevTime = 0;\n            this.stage = new createjs.Stage(canvas);\n            this.velocity = new Vector3(0, 0, 0);\n            // setup a THREE.JS Clock object\n            this.clock = new Clock();\n            // Instantiate Game Controls\n            this.keyboardControls = new objects.KeyboardControls();\n            this.mouseControls = new objects.MouseControls();\n        };\n        /**\n         * This method sets up the scoreboard for the scene\n         *\n         * @method setupScoreboard\n         * @returns void\n         */\n        Level3.prototype.setupScoreboard = function () {\n            // initialize  score and lives values\n            this.scoreValue = 0;\n            this.livesValue = 1;\n            // Add Lives Label\n            this.livesLabel = new createjs.Text(\"LIVES: \" + this.livesValue, \"40px Consolas\", \"#ffffff\");\n            this.livesLabel.x = config.Screen.WIDTH * 0.1;\n            this.livesLabel.y = (config.Screen.HEIGHT * 0.15) * 0.20;\n            this.stage.addChild(this.livesLabel);\n            console.log(\"Added Lives Label to stage\");\n            // Add Score Label\n            this.scoreLabel = new createjs.Text(\"SCORE: \" + this.scoreValue, \"40px Consolas\", \"#ffffff\");\n            this.scoreLabel.x = config.Screen.WIDTH * 0.8;\n            this.scoreLabel.y = (config.Screen.HEIGHT * 0.15) * 0.20;\n            this.stage.addChild(this.scoreLabel);\n            console.log(\"Added Score Label to stage\");\n        };\n        /**\n         * Add lights to the scene\n         *\n         * @method addLights\n         * @return void\n         */\n        Level3.prototype.addLights = function () {\n            // Spot Light\n            this.spotLight = new SpotLight(0xffffff);\n            this.spotLight.position.set(20, 50, -15);\n            this.spotLight.castShadow = true;\n            this.spotLight.intensity = 2;\n            this.spotLight.lookAt(new Vector3(0, 0, 0));\n            this.spotLight.shadowCameraNear = 2;\n            this.spotLight.shadowCameraFar = 200;\n            this.spotLight.shadowCameraLeft = -5;\n            this.spotLight.shadowCameraRight = 5;\n            this.spotLight.shadowCameraTop = 5;\n            this.spotLight.shadowCameraBottom = -5;\n            this.spotLight.shadowMapWidth = 2048;\n            this.spotLight.shadowMapHeight = 2048;\n            this.spotLight.shadowDarkness = 0.5;\n            this.spotLight.name = \"Spot Light\";\n            this.add(this.spotLight);\n            //AmbientLight\n            this.ambientLight = new AmbientLight(0x404040);\n            this.add(this.ambientLight);\n            console.log(\"Added Lights to scene\");\n        };\n        /**\n         * Add a ground plane to the scene\n         *\n         * @method addGround\n         * @return void\n         */\n        Level3.prototype.addGround = function () {\n            this.groundTexture = new THREE.TextureLoader().load('../../Assets/images/grass.jpg');\n            this.groundTexture.wrapS = THREE.RepeatWrapping;\n            this.groundTexture.wrapT = THREE.RepeatWrapping;\n            this.groundTexture.repeat.set(8, 8);\n            this.groundTextureNormal = new THREE.TextureLoader().load('../../Assets/images/GravelCobbleNormal.png');\n            this.groundTextureNormal.wrapS = THREE.RepeatWrapping;\n            this.groundTextureNormal.wrapT = THREE.RepeatWrapping;\n            this.groundTextureNormal.repeat.set(8, 8);\n            this.groundMaterial = new PhongMaterial();\n            this.groundMaterial.map = this.groundTexture;\n            this.groundMaterial.bumpMap = this.groundTextureNormal;\n            this.groundMaterial.bumpScale = 0.2;\n            this.groundGeometry = new BoxGeometry(20, 1, 20);\n            this.groundPhysicsMaterial = Physijs.createMaterial(this.groundMaterial, 0, 0);\n            this.ground = new Physijs.ConvexMesh(this.groundGeometry, this.groundPhysicsMaterial, 0);\n            this.ground.receiveShadow = true;\n            this.ground.name = \"Ground\";\n            this.add(this.ground);\n            console.log(\"Added Burnt Ground to scene\");\n        };\n        /**\n         * Add the islands to the scene\n         *\n         * @method addIslands\n         * @return void\n         */\n        Level3.prototype.addIslands = function () {\n            this.islandGeometry = new BoxGeometry(6, 1, 25);\n            this.islandPhysicsMaterial = Physijs.createMaterial(this.groundMaterial, 0, 0);\n            this.island1 = new Physijs.ConvexMesh(this.islandGeometry, this.islandPhysicsMaterial, 0);\n            this.island1.position.set(-17, 0, 0);\n            this.island1.receiveShadow = true;\n            this.island1.name = \"Ground\";\n            this.add(this.island1);\n            this.island2 = new Physijs.ConvexMesh(this.islandGeometry, this.islandPhysicsMaterial, 0);\n            this.island2.position.set(17, 0, 0);\n            this.island2.receiveShadow = true;\n            this.island2.name = \"Ground\";\n            this.add(this.island2);\n            this.island3 = new Physijs.ConvexMesh(this.islandGeometry, this.islandPhysicsMaterial, 0);\n            this.island3.position.set(0, 0, -17);\n            this.island3.receiveShadow = true;\n            this.island3.rotateY(1.5708);\n            this.island3.name = \"Ground\";\n            this.add(this.island3);\n            this.island4 = new Physijs.ConvexMesh(this.islandGeometry, this.islandPhysicsMaterial, 0);\n            this.island4.position.set(0, 0, 17);\n            this.island4.receiveShadow = true;\n            this.island4.rotateY(1.5708);\n            this.island4.name = \"Ground\";\n            this.add(this.island4);\n        };\n        /**\n         * Add walls to the scene\n         *\n         * @method addWalls\n         * @return void\n         */\n        Level3.prototype.addWalls = function () {\n            this.wallTexture = new THREE.TextureLoader().load('../../Assets/images/wall.jpg');\n            this.wallTexture.wrapS = THREE.RepeatWrapping;\n            this.wallTexture.wrapT = THREE.RepeatWrapping;\n            this.wallTexture.repeat.set(8, 8);\n            this.wallMaterial = new PhongMaterial();\n            this.wallMaterial.map = this.wallTexture;\n            this.wallGeometry = new BoxGeometry(20, 4, .5);\n            this.wallPhysicsMaterial = Physijs.createMaterial(this.wallMaterial, 0, 0);\n            this.wall1 = new Physijs.ConvexMesh(this.wallGeometry, this.wallPhysicsMaterial, 0);\n            this.wall1.position.set(14.2, 2.5, -4.1);\n            this.wall1.rotateY(1.5708);\n            this.wall1.receiveShadow = true;\n            this.wall1.name = \"Wall\";\n            this.add(this.wall1);\n            this.wall2 = new Physijs.ConvexMesh(this.wallGeometry, this.wallPhysicsMaterial, 0);\n            this.wall2.position.set(6, 2.5, 6.4);\n            this.wall2.rotateY(1.5708);\n            this.wall2.receiveShadow = true;\n            this.wall2.name = \"Wall\";\n            this.add(this.wall2);\n            this.wall3 = new Physijs.ConvexMesh(this.wallGeometry, this.wallPhysicsMaterial, 0);\n            this.wall3.position.set(-10, 2.5, -6.1);\n            this.wall3.rotateY(1.5708);\n            this.wall3.receiveShadow = true;\n            this.wall3.name = \"Wall\";\n            this.add(this.wall3);\n            this.wall4 = new Physijs.ConvexMesh(this.wallGeometry, this.wallPhysicsMaterial, 0);\n            this.wall4.position.set(-7.7, 2.5, 9.7);\n            this.wall4.receiveShadow = true;\n            this.wall4.name = \"Wall\";\n            this.add(this.wall4);\n            this.wall5 = new Physijs.ConvexMesh(this.wallGeometry, this.wallPhysicsMaterial, 0);\n            this.wall5.position.set(-7.6, 2.5, -3.85);\n            this.wall5.receiveShadow = true;\n            this.wall5.name = \"Wall\";\n            this.add(this.wall5);\n            this.wallGeometry = new BoxGeometry(10, 4, .5);\n            this.wall6 = new Physijs.ConvexMesh(this.wallGeometry, this.wallPhysicsMaterial, 0);\n            this.wall6.position.set(-1.9, 2.5, -13);\n            this.wall6.rotateY(1.5708);\n            this.wall6.receiveShadow = true;\n            this.wall6.name = \"Wall\";\n            this.add(this.wall6);\n        };\n        /**\n        * Add rocks to the scene - actually it just prepare the rock, who really add it to the scene is the pressure plate\n        *\n        * @method addRocks\n        * @return void\n        */\n        Level3.prototype.addRocks = function () {\n            this.rockTexture = new THREE.TextureLoader().load('../../Assets/images/rock.jpg');\n            this.rockTexture.wrapS = THREE.RepeatWrapping;\n            this.rockTexture.wrapT = THREE.RepeatWrapping;\n            this.rockMaterial = new PhongMaterial();\n            this.rockMaterial.map = this.rockTexture;\n            this.rockGeometry = new SphereGeometry(1, 5, 5);\n            this.rockPhysicsMaterial = Physijs.createMaterial(this.rockMaterial, 0, 0);\n            this.rock1 = new Physijs.ConvexMesh(this.rockGeometry, this.rockPhysicsMaterial, 1);\n            this.rock1.position.set(-4, 10, -5.5);\n            this.rock1.receiveShadow = true;\n            this.rock1.name = \"Rock\";\n            this.rock2 = new Physijs.ConvexMesh(this.rockGeometry, this.rockPhysicsMaterial, 1);\n            this.rock2.position.set(-17, 10, -8);\n            this.rock2.receiveShadow = true;\n            this.rock2.name = \"Rock\";\n            this.rock3 = new Physijs.ConvexMesh(this.rockGeometry, this.rockPhysicsMaterial, 1);\n            this.rock3.position.set(-18, 10, 2);\n            this.rock3.receiveShadow = true;\n            this.rock3.name = \"Rock\";\n        };\n        /**\n         * Add Logs to the scene - actually it just prepare the rock, who really add it to the scene is the pressure plate\n         *\n         * @method addLogs\n         * @return void\n         */\n        Level3.prototype.addLogs = function () {\n            this.logTexture = new THREE.TextureLoader().load('../../Assets/images/fallingbranch.jpg');\n            this.logTexture.wrapS = THREE.RepeatWrapping;\n            this.logTexture.wrapT = THREE.RepeatWrapping;\n            this.logMaterial = new PhongMaterial();\n            this.logMaterial.map = this.logTexture;\n            this.logGeometry = new CylinderGeometry(1, 1, 10);\n            this.logPhysicsMaterial = Physijs.createMaterial(this.logMaterial, 0, 0);\n            this.log = new Physijs.ConvexMesh(this.logGeometry, this.logPhysicsMaterial, 1);\n            this.log.position.set(4, 15, 10);\n            this.log.rotation.x = 1.5708;\n            this.log.receiveShadow = true;\n            this.log.name = \"Log\";\n        };\n        /**\n         * Add Pressure Plates to the scene\n         *\n         * @method addPlates\n         * @return void\n         */\n        Level3.prototype.addPlates = function () {\n            this.plateTexture = new THREE.TextureLoader().load('../../Assets/images/PressurePlate.jpg');\n            this.plateTexture.wrapS = THREE.RepeatWrapping;\n            this.plateTexture.wrapT = THREE.RepeatWrapping;\n            this.plateMaterial = new PhongMaterial();\n            this.plateMaterial.map = this.plateTexture;\n            this.plateGeometry = new CubeGeometry(1, 0.001, 1);\n            this.platePhysicsMaterial = Physijs.createMaterial(this.plateMaterial, 0, 0);\n            this.plate1 = new Physijs.ConvexMesh(this.plateGeometry, this.platePhysicsMaterial, 0);\n            this.plate1.position.set(1, .5, -5.5);\n            this.plate1.receiveShadow = true;\n            this.plate1.name = \"Plate1\";\n            this.add(this.plate1);\n            this.plate2 = new Physijs.ConvexMesh(this.plateGeometry, this.platePhysicsMaterial, 0);\n            this.plate2.position.set(-18.7, .5, -3);\n            this.plate2.receiveShadow = true;\n            this.plate2.name = \"Plate2\";\n            this.add(this.plate2);\n            this.plate3 = new Physijs.ConvexMesh(this.plateGeometry, this.platePhysicsMaterial, 0);\n            this.plate3.position.set(4, .5, 9);\n            this.plate3.receiveShadow = true;\n            this.plate3.name = \"Plate3\";\n            this.add(this.plate3);\n        };\n        /**\n         * Reset all hazards function\n         *\n         * @method resetHazards\n         * @return void\n         */\n        Level3.prototype.resetHazards = function () {\n            this.remove(this.rock1);\n            this.remove(this.rock2);\n            this.remove(this.rock3);\n            this.remove(this.log);\n            this.rock1.position.set(-4, 10, -5.5);\n            this.rock2.position.set(-17, 10, -8);\n            this.rock3.position.set(-18, 10, 2);\n            this.log.position.set(4, 15, 10);\n        };\n        /**\n         * Adds the player controller to the scene\n         *\n         * @method addPlayer\n         * @return void\n         */\n        Level3.prototype.addPlayer = function () {\n            // Player Object\n            this.playerGeometry = new BoxGeometry(2, 4, 2);\n            this.playerMaterial = Physijs.createMaterial(new LambertMaterial({ color: 0x00ff00 }), 0.4, 0);\n            this.player = new Physijs.BoxMesh(this.playerGeometry, this.playerMaterial, 1);\n            this.player.position.set(0, 20, 0);\n            this.player.receiveShadow = true;\n            this.player.castShadow = true;\n            this.player.name = \"Player\";\n            this.add(this.player);\n            console.log(\"Added Player to Scene\");\n            this.player.setAngularFactor(new THREE.Vector3(0, 0, 0));\n        };\n        /**\n         * Add the death plane to the scene\n         *\n         * @method addDeathPlane\n         * @return void\n         */\n        Level3.prototype.addDeathPlane = function () {\n            this.deathPlaneGeometry = new BoxGeometry(100, 1, 100);\n            this.deathPlaneMaterial = new THREE.MeshLambertMaterial({ color: 0xE5E5FF, transparent: true, opacity: 0.1 });\n            this.deathPlane = new Physijs.BoxMesh(this.deathPlaneGeometry, this.deathPlaneMaterial, 0);\n            this.deathPlane.position.set(0, -20, 0);\n            this.deathPlane.name = \"DeathPlane\";\n            this.add(this.deathPlane);\n            console.log(\"Added DeathPlane to scene\");\n        };\n        /**\n         * Add the Skybox to the scene\n         *\n         * @method addSkyBox\n         * @return void\n         */\n        Level3.prototype.addSkyBox = function () {\n            this.skyBox = new gameObject(new SphereGeometry(60, 60, 60), new LambertMaterial({ map: ImageUtils.loadTexture('../../Assets/Images/skyBG.jpg') }), 2, 2, 2);\n            this.skyBox.material.side = THREE.DoubleSide;\n            this.skyBox.name = \"Skybox\";\n            this.add(this.skyBox);\n            console.log(\"Added skyBox to scene\");\n        };\n        /**\n         * Add Berry to the scene\n         *\n         * @method addBerry\n         * @return void\n         */\n        Level3.prototype.addBerry = function () {\n            this.berryTexture = new THREE.TextureLoader().load('../../Assets/images/berry.jpg');\n            this.berryTexture.wrapS = THREE.RepeatWrapping;\n            this.berryTexture.wrapT = THREE.RepeatWrapping;\n            this.berryMaterial = new PhongMaterial();\n            this.berryMaterial.map = this.berryTexture;\n            this.berryGeometry = new BoxGeometry(.5, .5, .5);\n            this.berryPhysicsMaterial = Physijs.createMaterial(this.berryMaterial, 0, 0);\n            this.berry = new Physijs.ConvexMesh(this.berryGeometry, this.berryPhysicsMaterial, 0);\n            this.berry.position.set(-8.5, 1.5, -5.5);\n            this.berry.receiveShadow = true;\n            this.berry.name = \"Berry\";\n            this.add(this.berry);\n            console.log(\"Added Berry to scene\");\n        };\n        /**\n         * Add Basket to the scene\n         *\n         * @method addBasket\n         * @return void\n         */\n        Level3.prototype.addBasket = function () {\n            this.basketTexture = new THREE.TextureLoader().load('../../Assets/images/bask.jpg');\n            this.basketTexture.wrapS = THREE.RepeatWrapping;\n            this.basketTexture.wrapT = THREE.RepeatWrapping;\n            this.basketMaterial = new PhongMaterial();\n            this.basketMaterial.map = this.basketTexture;\n            this.basketGeometry = new BoxGeometry(.5, .5, .5);\n            this.basketPhysicsMaterial = Physijs.createMaterial(this.basketMaterial, 0, 0);\n            this.basket = new Physijs.ConvexMesh(this.basketGeometry, this.basketPhysicsMaterial, 0);\n            this.basket.position.set(-16, 3, 14);\n            this.basket.receiveShadow = true;\n            this.basket.name = \"Basket\";\n            this.add(this.basket);\n            console.log(\"Added basket to scene\");\n        };\n        /**\n         * This method adds a coin to the scene\n         *\n         * @method addCoinMesh\n         * @return void\n         */\n        Level3.prototype.addCoinMesh = function () {\n            var self = this;\n            this.coins = new Array(); // Instantiate a convex mesh array\n            var coinLoader = new THREE.JSONLoader().load(\"../../Assets/imported/coin.json\", function (geometry) {\n                var phongMaterial = new PhongMaterial({ color: 0xE7AB32 });\n                phongMaterial.emissive = new THREE.Color(0xE7AB32);\n                var coinMaterial = Physijs.createMaterial((phongMaterial), 0.4, 0.6);\n                for (var count = 0; count < self.coinCount; count++) {\n                    self.coins[count] = new Physijs.ConvexMesh(geometry, coinMaterial);\n                    self.coins[count].receiveShadow = true;\n                    self.coins[count].castShadow = true;\n                    self.coins[count].name = \"Coin\";\n                    self.setCoinPosition(self.coins[count]);\n                    console.log(\"Added Coin Mesh to Scene, at position: \" + self.coins[count].position);\n                }\n            });\n        };\n        /**\n         * This method randomly sets the coin object's position\n         *\n         * @method setCoinPosition\n         * @return void\n         */\n        Level3.prototype.setCoinPosition = function (coin) {\n            var randomPointX = Math.floor(Math.random() * 20) - 10;\n            var randomPointZ = Math.floor(Math.random() * 20) - 10;\n            coin.position.set(randomPointX, 10, randomPointZ);\n            console.log(randomPointX);\n            console.log(randomPointZ);\n            this.add(coin);\n        };\n        /**\n         * Event Handler method for any pointerLockChange events\n         *\n         * @method pointerLockChange\n         * @return void\n         */\n        Level3.prototype.pointerLockChange = function (event) {\n            if (document.pointerLockElement === this.element) {\n                // enable our mouse and keyboard controls\n                this.keyboardControls.enabled = true;\n                this.mouseControls.enabled = true;\n                this.blocker.style.display = 'none';\n            }\n            else {\n                if (this.livesValue <= 0) {\n                    this.blocker.style.display = 'none';\n                    document.removeEventListener('pointerlockchange', this.pointerLockChange.bind(this), false);\n                    document.removeEventListener('mozpointerlockchange', this.pointerLockChange.bind(this), false);\n                    document.removeEventListener('webkitpointerlockchange', this.pointerLockChange.bind(this), false);\n                    document.removeEventListener('pointerlockerror', this.pointerLockError.bind(this), false);\n                    document.removeEventListener('mozpointerlockerror', this.pointerLockError.bind(this), false);\n                    document.removeEventListener('webkitpointerlockerror', this.pointerLockError.bind(this), false);\n                }\n                else {\n                    this.blocker.style.display = '-webkit-box';\n                    this.blocker.style.display = '-moz-box';\n                    this.blocker.style.display = 'box';\n                    this.instructions.style.display = '';\n                }\n                // disable our mouse and keyboard controls\n                this.keyboardControls.enabled = false;\n                this.mouseControls.enabled = false;\n                console.log(\"PointerLock disabled\");\n            }\n        };\n        /**\n         * Event handler for PointerLockError\n         *\n         * @method pointerLockError\n         * @return void\n         */\n        Level3.prototype.pointerLockError = function (event) {\n            this.instructions.style.display = '';\n            console.log(\"PointerLock Error Detected!!\");\n        };\n        // Check Controls Function\n        /**\n         * This method updates the player's position based on user input\n         *\n         * @method checkControls\n         * @return void\n         */\n        Level3.prototype.checkControls = function () {\n            if (this.keyboardControls.enabled) {\n                this.velocity = new Vector3();\n                var time = performance.now();\n                var delta = (time - this.prevTime) / 1000;\n                var speed = 600.0;\n                //if (this.isGrounded) {\n                var direction = new Vector3(0, 0, 0);\n                if (this.keyboardControls.moveForward) {\n                    this.velocity.z -= speed * delta;\n                }\n                if (this.keyboardControls.moveLeft) {\n                    this.velocity.x -= speed * delta;\n                }\n                if (this.keyboardControls.moveBackward) {\n                    this.velocity.z += speed * delta;\n                }\n                if (this.keyboardControls.moveRight) {\n                    this.velocity.x += speed * delta;\n                }\n                if (this.keyboardControls.jump && this.isGrounded) {\n                    if (this.player.position.y >= 1 && this.player.position.y <= 3) {\n                        this.velocity.y += 10 * speed * delta;\n                    }\n                    else if (this.player.position.y > 3) {\n                        this.isGrounded = false;\n                        createjs.Sound.play(\"jump\");\n                    }\n                }\n                this.player.setDamping(0.7, 0.1);\n                // Changing player's rotation\n                this.player.setAngularVelocity(new Vector3(0, this.mouseControls.yaw, 0));\n                direction.addVectors(direction, this.velocity);\n                direction.applyQuaternion(this.player.quaternion);\n                if (Math.abs(this.player.getLinearVelocity().x) < 20 && Math.abs(this.player.getLinearVelocity().y) < 10) {\n                    this.player.applyCentralForce(direction);\n                }\n                this.cameraLook();\n                //} // isGrounded ends\n                //reset Pitch and Yaw\n                this.mouseControls.pitch = 0;\n                this.mouseControls.yaw = 0;\n                this.prevTime = time;\n            } // Controls Enabled ends\n            else {\n                this.player.setAngularVelocity(new Vector3(0, 0, 0));\n            }\n        };\n        Level3.prototype._unpauseSimulation = function () {\n            scene.onSimulationResume();\n            console.log(\"resume simulation\");\n        };\n        // PUBLIC METHODS +++++++++++++++++++++++++++++++++++++++++++\n        /**\n         * The start method is the main method for the scene class\n         *\n         * @method start\n         * @return void\n         */\n        Level3.prototype.start = function () {\n            var _this = this;\n            // Set Up Scoreboard\n            this.setupScoreboard();\n            // Set Up background sound\n            this.playBackgroundSound();\n            //check to see if pointerlock is supported\n            this.havePointerLock = 'pointerLockElement' in document ||\n                'mozPointerLockElement' in document ||\n                'webkitPointerLockElement' in document;\n            //define berry positions        \n            this.berryLocation.push(new THREE.Vector3(-8.5, 1.5, -5.5));\n            this.berryLocation.push(new THREE.Vector3(-2, 1.5, 16));\n            this.berryLocation.push(new THREE.Vector3(17, 1.5, 0));\n            this.berryLocation.push(new THREE.Vector3(-15, 1.5, -2));\n            //define basket positions\n            this.basketLocation.push(new THREE.Vector3(-16, 3, 14));\n            this.basketLocation.push(new THREE.Vector3(15, 3, 16));\n            this.basketLocation.push(new THREE.Vector3(-15, 3, -16));\n            this.basketLocation.push(new THREE.Vector3(17, 3, -15));\n            // Check to see if we have pointerLock\n            if (this.havePointerLock) {\n                this.element = document.body;\n                this.instructions.addEventListener('click', function () {\n                    // Ask the user for pointer lock\n                    console.log(\"Requesting PointerLock\");\n                    _this.element.requestPointerLock = _this.element.requestPointerLock ||\n                        _this.element.mozRequestPointerLock ||\n                        _this.element.webkitRequestPointerLock;\n                    _this.element.requestPointerLock();\n                });\n                document.addEventListener('pointerlockchange', this.pointerLockChange.bind(this), false);\n                document.addEventListener('mozpointerlockchange', this.pointerLockChange.bind(this), false);\n                document.addEventListener('webkitpointerlockchange', this.pointerLockChange.bind(this), false);\n                document.addEventListener('pointerlockerror', this.pointerLockError.bind(this), false);\n                document.addEventListener('mozpointerlockerror', this.pointerLockError.bind(this), false);\n                document.addEventListener('webkitpointerlockerror', this.pointerLockError.bind(this), false);\n            }\n            // Scene changes for Physijs\n            this.name = \"Main\";\n            this.fog = new THREE.Fog(0xffffff, 0, 750);\n            this.setGravity(new THREE.Vector3(0, -10, 0));\n            // start simulation\n            /*\n            this.addEventListener('update', this._simulateScene);\n            console.log(\"Start Simulation\"); */\n            // Add Spot Light to the scene\n            this.addLights();\n            // Ground Object\n            this.addGround();\n            //Add all the island arround the main ground\n            this.addIslands();\n            //Add Walls in the scenario\n            this.addWalls();\n            //Add Rocks in the scenario\n            this.addRocks();\n            //Add Logs in the scenario\n            this.addLogs();\n            //Add the pressure plates in the scenario\n            this.addPlates();\n            //Reset the first time\n            this.resetHazards();\n            // Add player controller\n            this.addPlayer();\n            // Add custom coin imported from Blender\n            //this.addCoinMesh();\n            // Add death plane to the scene\n            this.addDeathPlane();\n            // Add Skybox to the scene\n            this.addSkyBox();\n            this.addBasket();\n            this.addBerry();\n            // Collision Check\n            this.player.addEventListener('collision', function (eventObject) {\n                if (eventObject.name === \"Ground\" || eventObject.name === \"Wall\") {\n                    this.isGrounded = true;\n                    createjs.Sound.play(\"land\");\n                }\n                if (eventObject.name === \"DeathPlane\") {\n                    createjs.Sound.play(\"Falling\");\n                    this.addDeath();\n                }\n                if (eventObject.name === \"Berry\") {\n                    createjs.Sound.play(\"Collect\");\n                    this.collectablePicked(eventObject);\n                    console.log(\"player ate a berry\");\n                }\n                if (eventObject.name === \"Basket\") {\n                    createjs.Sound.play(\"Collect\");\n                    this.collectablePicked(eventObject);\n                    console.log(\"player ate a basket\");\n                }\n                if (eventObject.name === \"Plate1\") {\n                    this.add(this.rock1);\n                }\n                if (eventObject.name === \"Plate2\") {\n                    this.add(this.rock2);\n                    this.add(this.rock3);\n                }\n                if (eventObject.name === \"Plate3\") {\n                    this.add(this.log);\n                }\n                if (eventObject.name === \"Rock\" || eventObject.name === \"Log\" && eventObject.position.y > 2) {\n                    createjs.Sound.play(\"Collision\");\n                    this.addDeath();\n                }\n                /*\n                if (eventObject.name === \"Coin\") {\n                    createjs.Sound.play(\"coin\");\n                    this.remove(eventObject);\n                    this.setCoinPosition(eventObject);\n                    this.scoreValue += 100;\n                    this.scoreLabel.text = \"SCORE: \" + this.scoreValue;\n                }*/\n            }.bind(this));\n            //Rock eventHandler            \n            this.rock1.addEventListener('collision', function (eventObject) {\n                if (eventObject.name === \"Ground\" || eventObject.name === \"Wall\") {\n                    this.resetHazards();\n                }\n            }.bind(this));\n            this.rock2.addEventListener('collision', function (eventObject) {\n                if (eventObject.name === \"Ground\" || eventObject.name === \"Wall\") {\n                    this.resetHazards();\n                }\n            }.bind(this));\n            this.rock3.addEventListener('collision', function (eventObject) {\n                if (eventObject.name === \"Ground\" || eventObject.name === \"Wall\") {\n                    this.resetHazards();\n                }\n            }.bind(this));\n            this.log.addEventListener('collision', function (eventObject) {\n                if (eventObject.name === \"Ground\" || eventObject.name === \"Wall\") {\n                    this.resetHazards();\n                }\n            }.bind(this));\n            // create parent-child relationship with camera and player\n            this.player.add(camera);\n            camera.position.set(0, 1, 0);\n            this.simulate();\n        };\n        /**\n         * Pick any collectable function\n         *\n         * @method collectablePicked\n         * @return void\n         */\n        Level3.prototype.collectablePicked = function (collectable) {\n            this.remove(collectable);\n            if (collectable.name === \"Berry\") {\n                this.berryNum = this.berryNum === (this.berryLocation.length - 1) ? 0 : (this.berryNum + 1);\n                collectable.position.x = this.berryLocation[this.berryNum].x;\n                collectable.position.y = this.berryLocation[this.berryNum].y;\n                collectable.position.z = this.berryLocation[this.berryNum].z;\n                this.scoreValue += 2;\n            }\n            if (collectable.name === \"Basket\") {\n                this.basketNum = this.basketNum === (this.basketLocation.length - 1) ? 0 : (this.basketNum + 1);\n                collectable.position.x = this.basketLocation[this.basketNum].x;\n                collectable.position.y = this.basketLocation[this.basketNum].y;\n                collectable.position.z = this.basketLocation[this.basketNum].z;\n                this.scoreValue += 5;\n            }\n            this.scoreLabel.text = \"SCORE: \" + this.scoreValue;\n            this.add(collectable);\n        };\n        /**\n         * add death function\n         *\n         * @method addDeath\n         * @return void\n         */\n        Level3.prototype.addDeath = function () {\n            this.livesValue--;\n            if (this.livesValue <= 0) {\n                // Exit Pointer Lock\n                document.exitPointerLock();\n                this.children = []; // an attempt to clean up\n                //this._isGamePaused = true;\n                // Play the Game Over Scene\n                currentScene = config.Scene.OVER;\n                changeScene();\n            }\n            else {\n                // otherwise reset my player and update Lives\n                this.livesLabel.text = \"LIVES: \" + this.livesValue;\n                this.remove(this.player);\n                this.player.position.set(0, 20, 0);\n                this.add(this.player);\n            }\n        };\n        /**\n         * Camera Look function\n         *\n         * @method cameraLook\n         * @return void\n         */\n        Level3.prototype.cameraLook = function () {\n            var zenith = THREE.Math.degToRad(90);\n            var nadir = THREE.Math.degToRad(-90);\n            var cameraPitch = camera.rotation.x + this.mouseControls.pitch;\n            // Constrain the Camera Pitch\n            camera.rotation.x = THREE.Math.clamp(cameraPitch, nadir, zenith);\n        };\n        /**\n         * @method update\n         * @returns void\n         */\n        Level3.prototype.update = function () {\n            /*\n            this.coins.forEach(coin => {\n                coin.setAngularFactor(new Vector3(0, 0, 0));\n                coin.setAngularVelocity(new Vector3(0, 1, 0));\n            });\n            */\n            this.checkControls();\n            this.stage.update();\n            if (!this.keyboardControls.paused) {\n                this.simulate();\n            }\n        };\n        /**\n         * Responds to screen resizes\n         *\n         * @method resize\n         * @return void\n         */\n        Level3.prototype.resize = function () {\n            canvas.style.width = \"100%\";\n            this.livesLabel.x = config.Screen.WIDTH * 0.1;\n            this.livesLabel.y = (config.Screen.HEIGHT * 0.15) * 0.20;\n            this.scoreLabel.x = config.Screen.WIDTH * 0.8;\n            this.scoreLabel.y = (config.Screen.HEIGHT * 0.15) * 0.20;\n            this.stage.update();\n        };\n        return Level3;\n    }(scenes.Scene));\n    scenes.Level3 = Level3;\n})(scenes || (scenes = {}));\n\n//# sourceMappingURL=level3.js.map\n","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * @module scenes\n */\nvar scenes;\n(function (scenes) {\n    /**\n     * This class instantiates the game over scene object\n     *\n     * @class Over\n     * @extends scenes.Scene\n     */\n    var Over = (function (_super) {\n        __extends(Over, _super);\n        /**\n         * Empty Contructor\n         *\n         * @constructor\n         */\n        function Over() {\n            _super.call(this);\n            this._initialize();\n            this.start();\n        }\n        Over.prototype._setupCanvas = function () {\n            canvas.style.width = \"100%\";\n            canvas.setAttribute(\"height\", config.Screen.HEIGHT.toString());\n            canvas.style.backgroundColor = \"#ffffff\";\n        };\n        /**\n         * This method sets up default values for class member variables\n         * and objects\n         *\n         * @method _initialize\n         * @return void\n         */\n        Over.prototype._initialize = function () {\n            // Create to HTMLElements\n            this._blocker = document.getElementById(\"blocker\");\n            this._blocker.style.display = \"none\";\n            // setup canvas for menu scene\n            this._setupCanvas();\n            // setup a stage on the canvas\n            this._stage = new createjs.Stage(canvas);\n            this._stage.enableMouseOver(20);\n        };\n        /**\n         * The start method is the main method for the scene class\n         *\n         * @method start\n         * @return void\n         */\n        Over.prototype.start = function () {\n            this._bgImage = new createjs.Bitmap(assets.getResult(\"MenuBackground\"));\n            this._bgImage.scaleX = 2;\n            this._bgImage.scaleY = 2;\n            this._stage.addChild(this._bgImage);\n            this._gameOverLabel = new createjs.Text(\"GAME OVER\", \"80px Consolas\", \"#000000\");\n            this._gameOverLabel.regX = this._gameOverLabel.getMeasuredWidth() * 0.5;\n            this._gameOverLabel.regY = this._gameOverLabel.getMeasuredLineHeight() * 0.5;\n            this._gameOverLabel.x = config.Screen.WIDTH * 0.5;\n            this._gameOverLabel.y = config.Screen.HEIGHT * 0.5;\n            this._stage.addChild(this._gameOverLabel);\n            this._restartButton = new createjs.Bitmap(assets.getResult(\"RestartButton\"));\n            this._restartButton.regX = this._restartButton.getBounds().width * 0.5;\n            this._restartButton.regY = this._restartButton.getBounds().height * 0.5;\n            this._restartButton.x = config.Screen.WIDTH * 0.5;\n            this._restartButton.y = (config.Screen.HEIGHT * 0.5) + 150;\n            this._stage.addChild(this._restartButton);\n            this._restartButton.on(\"mouseover\", function (event) {\n                event.target.alpha = 0.7;\n            });\n            this._restartButton.on(\"mouseout\", function (event) {\n                event.target.alpha = 1.0;\n            });\n            this._restartButton.on(\"click\", function (event) {\n                currentScene = config.Scene.MENU;\n                changeScene();\n            });\n        };\n        /**\n         * The update method updates the animation loop and other objects\n         *\n         * @method update\n         * @return void\n         */\n        Over.prototype.update = function () {\n            this._stage.update();\n        };\n        /**\n         * The resize method is a procedure that sets variables and objects on screen resize\n         *\n         * @method resize\n         * @return void\n         */\n        Over.prototype.resize = function () {\n            this._setupCanvas();\n        };\n        return Over;\n    }(scenes.Scene));\n    scenes.Over = Over;\n})(scenes || (scenes = {}));\n\n//# sourceMappingURL=over.js.map\n","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * @module scenes\n */\nvar scenes;\n(function (scenes) {\n    /**\n     * This class instantiates the game Help scene object\n     *\n     * @class Help\n     * @extends scenes.Scene\n     */\n    var Help = (function (_super) {\n        __extends(Help, _super);\n        /**\n         * Empty Contructor\n         *\n         * @constructor\n         */\n        function Help() {\n            _super.call(this);\n            this._initialize();\n            this.start();\n        }\n        Help.prototype._setupCanvas = function () {\n            canvas.style.width = \"100%\";\n            canvas.setAttribute(\"height\", config.Screen.HEIGHT.toString());\n            canvas.style.backgroundColor = \"#ffffff\";\n        };\n        /**\n         * This method sets up default values for class member variables\n         * and objects\n         *\n         * @method _initialize\n         * @return void\n         */\n        Help.prototype._initialize = function () {\n            // Create to HTMLElements\n            this._blocker = document.getElementById(\"blocker\");\n            this._blocker.style.display = \"none\";\n            // setup canvas for menu scene\n            this._setupCanvas();\n            // setup a stage on the canvas\n            this._stage = new createjs.Stage(canvas);\n            this._stage.enableMouseOver(20);\n        };\n        /**\n         * The start method is the main method for the scene class\n         *\n         * @method start\n         * @return void\n         */\n        Help.prototype.start = function () {\n            this._bgImage = new createjs.Bitmap(assets.getResult(\"MenuBackground\"));\n            this._bgImage.scaleX = 2;\n            this._bgImage.scaleY = 2;\n            this._stage.addChild(this._bgImage);\n            this._gameHelpLabel = new createjs.Text(\"GAME Help\", \"80px Consolas\", \"#000000\");\n            this._gameHelpLabel.regX = this._gameHelpLabel.getMeasuredWidth() * 0.5;\n            this._gameHelpLabel.regY = this._gameHelpLabel.getMeasuredLineHeight() * 0.5;\n            this._gameHelpLabel.x = config.Screen.WIDTH * 0.5;\n            this._gameHelpLabel.y = config.Screen.HEIGHT * 0.5;\n            this._stage.addChild(this._gameHelpLabel);\n            this._startButton = new createjs.Bitmap(assets.getResult(\"StartButton\"));\n            this._startButton.regX = this._startButton.getBounds().width * 0.5;\n            this._startButton.regY = this._startButton.getBounds().height * 0.5;\n            this._startButton.x = config.Screen.WIDTH * 0.5;\n            this._startButton.y = (config.Screen.HEIGHT * 0.5) + 150;\n            this._stage.addChild(this._startButton);\n            this._startButton.on(\"mouseover\", function (event) {\n                event.target.alpha = 0.7;\n            });\n            this._startButton.on(\"mouseout\", function (event) {\n                event.target.alpha = 1.0;\n            });\n            this._startButton.on(\"click\", function (event) {\n                currentScene = config.Scene.MENU;\n                changeScene();\n            });\n            this._backButton = new createjs.Bitmap(assets.getResult(\"BackButton\"));\n            this._backButton.regX = this._backButton.getBounds().width * 0.5;\n            this._backButton.regY = this._backButton.getBounds().height * 0.5;\n            this._backButton.x = config.Screen.WIDTH * 0.5;\n            this._backButton.y = (config.Screen.HEIGHT * 0.5) + 250;\n            this._stage.addChild(this._backButton);\n            this._backButton.on(\"mouseover\", function (event) {\n                event.target.alpha = 0.7;\n            });\n            this._backButton.on(\"mouseout\", function (event) {\n                event.target.alpha = 1.0;\n            });\n            this._backButton.on(\"click\", function (event) {\n                currentScene = config.Scene.MENU;\n                changeScene();\n            });\n        };\n        /**\n         * The update method updates the animation loop and other objects\n         *\n         * @method update\n         * @return void\n         */\n        Help.prototype.update = function () {\n            this._stage.update();\n        };\n        /**\n         * The resize method is a procedure that sets variables and objects on screen resize\n         *\n         * @method resize\n         * @return void\n         */\n        Help.prototype.resize = function () {\n            this._setupCanvas();\n        };\n        return Help;\n    }(scenes.Scene));\n    scenes.Help = Help;\n})(scenes || (scenes = {}));\n\n//# sourceMappingURL=help.js.map\n","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * @module scenes\n */\nvar scenes;\n(function (scenes) {\n    /**\n     * Menu Scene extends scenes.Scene superclass is used to\n     * create a custom menu for the THREEJS Game\n     *\n     * @class Menu\n     * @extends scene.Scene\n     * @param blocker {HTMLElement}\n     * @param _stage {createjs.Stage}\n     * @param _gameLabel {createjs.Text}\n     * @param _startButton {createjs.Bitmap}\n     */\n    var Menu = (function (_super) {\n        __extends(Menu, _super);\n        /**\n         * Empty Constructor - calls _initialize and start methods\n         *\n         * @constructor\n         */\n        function Menu() {\n            _super.call(this);\n            this._initialize();\n            this.start();\n        }\n        // PRIVATE METHODS ++++++++++++++++++++++++++++++++++++++++++++++\n        Menu.prototype._setupCanvas = function () {\n            canvas.style.width = \"100%\";\n            canvas.setAttribute(\"height\", config.Screen.HEIGHT.toString());\n            canvas.style.backgroundColor = \"#ffffff\";\n        };\n        /**\n         * This method sets up default values for class member variables\n         * and objects\n         *\n         * @method _initialize\n         * @return void\n         */\n        Menu.prototype._initialize = function () {\n            // Create to HTMLElements\n            this._blocker = document.getElementById(\"blocker\");\n            this._blocker.style.display = \"none\";\n            // setup canvas for menu scene\n            this._setupCanvas();\n            // setup a stage on the canvas\n            this._stage = new createjs.Stage(canvas);\n            this._stage.enableMouseOver(20);\n        };\n        // PUBLIC METHODS +++++++++++++++++++++++++++++++++++++++++++++++\n        /**\n         * The start method is the main method for the scene class\n         *\n         * @method start\n         * @return void\n         */\n        Menu.prototype.start = function () {\n            this._bgImage = new createjs.Bitmap(assets.getResult(\"MenuBackground\"));\n            this._bgImage.scaleX = 2;\n            this._bgImage.scaleY = 2;\n            this._stage.addChild(this._bgImage);\n            this._logoImage = new createjs.Bitmap(assets.getResult(\"CompanyLogo\"));\n            this._logoImage.x = config.Screen.WIDTH / 2 - (this._logoImage.getBounds().width / 2);\n            this._logoImage.y = config.Screen.HEIGHT * 0.07;\n            this._stage.addChild(this._logoImage);\n            this._gameLabel = new createjs.Text(\"AMAZE SKY GAME\", \"80px Consolas\", \"#000000\");\n            this._gameLabel.regX = this._gameLabel.getMeasuredWidth() * 0.5;\n            this._gameLabel.regY = this._gameLabel.getMeasuredLineHeight() * 0.5;\n            this._gameLabel.x = config.Screen.WIDTH * 0.5;\n            this._gameLabel.y = config.Screen.HEIGHT * 0.5;\n            this._stage.addChild(this._gameLabel);\n            this._startButton = new createjs.Bitmap(assets.getResult(\"StartButton\"));\n            this._startButton.regX = this._startButton.getBounds().width * 0.5;\n            this._startButton.regY = this._startButton.getBounds().height * 0.5;\n            this._startButton.x = config.Screen.WIDTH * 0.5;\n            this._startButton.y = (config.Screen.HEIGHT * 0.5) + 150;\n            this._stage.addChild(this._startButton);\n            this._startButton.on(\"mouseover\", function (event) {\n                event.target.alpha = 0.7;\n            });\n            this._startButton.on(\"mouseout\", function (event) {\n                event.target.alpha = 1.0;\n            });\n            this._startButton.on(\"click\", function (event) {\n                currentScene = config.Scene.LEVEL2;\n                changeScene();\n            });\n            this._helpButton = new createjs.Bitmap(assets.getResult(\"HelpButton\"));\n            this._helpButton.regX = this._helpButton.getBounds().width * 0.5;\n            this._helpButton.regY = this._helpButton.getBounds().height * 0.5;\n            this._helpButton.x = config.Screen.WIDTH * 0.5;\n            this._helpButton.y = (config.Screen.HEIGHT * 0.5) + 250;\n            this._stage.addChild(this._helpButton);\n            this._helpButton.on(\"mouseover\", function (event) {\n                event.target.alpha = 0.7;\n            });\n            this._helpButton.on(\"mouseout\", function (event) {\n                event.target.alpha = 1.0;\n            });\n            this._helpButton.on(\"click\", function (event) {\n                currentScene = config.Scene.HELP;\n                changeScene();\n            });\n            this._exitButton = new createjs.Bitmap(assets.getResult(\"ExitButton\"));\n            this._exitButton.regX = this._exitButton.getBounds().width * 0.5;\n            this._exitButton.regY = this._exitButton.getBounds().height * 0.5;\n            this._exitButton.x = config.Screen.WIDTH * 0.5;\n            this._exitButton.y = (config.Screen.HEIGHT * 0.5) + 350;\n            this._stage.addChild(this._exitButton);\n            this._exitButton.on(\"mouseover\", function (event) {\n                event.target.alpha = 0.7;\n            });\n            this._exitButton.on(\"mouseout\", function (event) {\n                event.target.alpha = 1.0;\n            });\n            this._exitButton.on(\"click\", function (event) {\n                alert(\"LEAVE THE GAME\");\n            });\n        };\n        /**\n         * The update method updates the animation loop and other objects\n         *\n         * @method update\n         * @return void\n         */\n        Menu.prototype.update = function () {\n            this._stage.update();\n        };\n        /**\n         * The resize method is a procedure that sets variables and objects on screen resize\n         *\n         * @method resize\n         * @return void\n         */\n        Menu.prototype.resize = function () {\n            this._setupCanvas();\n        };\n        return Menu;\n    }(scenes.Scene));\n    scenes.Menu = Menu;\n})(scenes || (scenes = {}));\n\n//# sourceMappingURL=menu.js.map\n"],"sourceRoot":"/source/"}